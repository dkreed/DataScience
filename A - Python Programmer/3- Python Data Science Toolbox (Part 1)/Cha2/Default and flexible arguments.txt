1-	Functions with one default argument
In the previous chapter, you've learned to define functions with more than one parameter and then calling those functions by passing the required number of arguments. In the last video, Hugo built on this idea by showing you how to define functions with default arguments. You will practice that skill in this exercise by writing a function that uses a default argument and then calling the function a couple of times.
Instructions
•	Complete the function header with the function name shout_echo. It accepts an argument word1 and a default argument echo with default value 1, in that order.
•	Use the * operator to concatenate echo copies of word1. Assign the result to echo_word.
•	Call shout_echo() with just the string, "Hey". Assign the result to no_echo.
•	Call shout_echo() with the string "Hey" and the value 5 for the default argument, echo. Assign the result to with_echo
Answer / Script.py

# Define shout_echo
def shout_echo (word1, echo=1):
    """Concatenate echo copies of word1 and three
     exclamation marks at the end of the string."""

    # Concatenate echo copies of word1 using *: echo_word
    echo_word = echo * word1

    # Concatenate '!!!' to echo_word: shout_word
    shout_word = echo_word + '!!!'

    # Return shout_word
    return shout_word

# Call shout_echo() with "Hey": no_echo
no_echo = "Hey" + '!!!'

# Call shout_echo() with "Hey" and echo=5: with_echo

with_echo = shout_echo("Hey", echo=5)

# Print no_echo and with_echo
print(no_echo)
print(with_echo)


2-	Functions with multiple default arguments
You've now defined a function that uses a default argument - don't stop there just yet! You will now try your hand at defining a function with more than one default argument and then calling this function in various ways.
After defining the function, you will call it by supplying values to all the default arguments of the function. Additionally, you will call the function by not passing a value to one of the default arguments - see how that changes the output of your function!
Instructions
•	Complete the function header with the function name shout_echo. It accepts an argument word1, a default argument echo with default value 1 and a default argument intense with default value False, in that order.
•	In the body of the if statement, make the string object echo_wordupper case by applying the method .upper() on it.
•	Call shout_echo() with the string, "Hey", the value 5 for echo and the value True for intense. Assign the result to with_big_echo.
•	Call shout_echo() with the string "Hey" and the value True for intense. Assign the result to big_no_echo.
Answer / Script.py


# Define shout_echo
def shout_echo(word1, echo =1, intense = False):
    """Concatenate echo copies of word1 and three
    exclamation marks at the end of the string."""

    # Concatenate echo copies of word1 using *: echo_word
    echo_word = word1 * echo

    # Capitalize echo_word if intense is True
    if intense is True:
        # Capitalize and concatenate '!!!': echo_word_new
        echo_word_new = echo_word.upper() + '!!!'
    else:
        # Concatenate '!!!' to echo_word: echo_word_new
        echo_word_new = echo_word + '!!!'

    # Return echo_word_new
    return echo_word_new

# Call shout_echo() with "Hey", echo=5 and intense=True: with_big_echo
with_big_echo = shout_echo("Hey",echo=5,intense=True )

# Call shout_echo() with "Hey" and intense=True: big_no_echo
big_no_echo = shout_echo("Hey",intense=True )

# Print values
print(with_big_echo)
print(big_no_echo)


3-	Functions with variable-length arguments (*args)
Flexible arguments enable you to pass a variable number of arguments to a function. In this exercise, you will practice defining a function that accepts a variable number of string arguments.
The function you will define is gibberish() which can accept a variable number of string values. Its return value is a single string composed of all the string arguments concatenated together in the order they were passed to the function call. You will call the function with a single string argument and see how the output changes with another call using more than one string argument. Recall from the previous video that, within the function definition, args is a tuple.
Instructions
•	Complete the function header with the function name gibberish. It accepts a single flexible argument *args.
•	Initialize a variable hodgepodge to an empty string.
•	Return the variable hodgepodge at the end of the function body.
•	Call gibberish() with the single string, "luke". Assign the result to one_word.
•	Hit the Submit button to call gibberish() with multiple arguments and to print the value to the Shell.
Answer / Script.py


# Define gibberish
def gibberish(*args):
    """Concatenate strings in *args together."""

    # Initialize an empty string: hodgepodge
    hodgepodge = ""

    # Concatenate the strings in args
    for word in args:
        hodgepodge += word

    # Return hodgepodge
    return hodgepodge

# Call gibberish() with one string: one_word
one_word = gibberish("luke")

# Call gibberish() with five strings: many_words
many_words = gibberish("luke", "leia", "han", "obi", "darth")

# Print one_word and many_words
print(one_word)
print(many_words)


4-	Functions with variable-length keyword arguments (**kwargs)
Let's push further on what you've learned about flexible arguments - you've used *args, you're now going to use **kwargs! What makes **kwargsdifferent is that it allows you to pass a variable number of keyword arguments to functions. Recall from the previous video that, within the function definition, kwargs is a dictionary.
To understand this idea better, you're going to use **kwargs in this exercise to define a function that accepts a variable number of keyword arguments. The function simulates a simple status report system that prints out the status of a character in a movie.
Instructions
•	Complete the function header with the function name report_status. It accepts a single flexible argument **kwargs.
•	Iterate over the key-value pairs of kwargs to print out the keys and values, separated by a colon ':'.
•	In the first call to report_status(), pass the following keyword-value pairs: name="luke", affiliation="jedi" and status="missing".
•	In the second call to report_status(), pass the following keyword-value pairs: name="anakin", affiliation="sith lord" and status="deceased".
Answer / Script.py

# Define report_status
def report_status(**kwargs):
    """Print out the status of a movie character."""

    print("\nBEGIN: REPORT\n")

    # Iterate over the key-value pairs of kwargs
    for key, value in kwargs.items():
        # Print out the keys and values, separated by a colon ':'
        print(key + ": " + value)

    print("\nEND REPORT")

# First call to report_status()
report_status(name="luke", affiliation="jedi", status="missing" )

# Second call to report_status()
report_status(name="anakin", affiliation="sith lord", status="deceased")
