1-	Iterators vs Iterables
Let's do a quick recall of what you've learned about iterables and iterators. Recall from the video that an iterable is an object that can return an iterator, while an iterator is an object that keeps state and produces the next value when you call next() on it. In this exercise, you will identify which object is an iterable and which is an iterator.
The environment has been pre-loaded with the variables flash1 and flash2. Try printing out their values with print() and next() to figure out which is an iterable and which is an iterator.
Instructions
Possible Answers
•	 
Both flash1 and flash2 are iterators.
•	 
Both flash1 and flash2 are iterables.
•	 
flash1 is an iterable and flash2 is an iterator.

Answer / Script.py

In [2]: print(flash1)
['jay garrick', 'barry allen', 'wally west', 'bart allen']

In [3]: next(flash2)
Out[3]: 'jay garrick'

In [4]: print(flash2)
<list_iterator object at 0x7f44275a20b8>

In [5]: next(flash1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    next(flash1)
TypeError: 'list' object is not an iterator

In [6]: print(flash1)
['jay garrick', 'barry allen', 'wally west', 'bart allen']

In [7]: print(flash2)
<list_iterator object at 0x7f44275a20b8>

Iterating over iterables (1)
Great, you're familiar with what iterables and iterators are! In this exercise, you will reinforce your knowledge about these by iterating over and printing from iterables and iterators.
You are provided with a list of strings flash. You will practice iterating over the list by using a for loop. You will also create an iterator for the list and access the values from the iterator.
Instructions
•	Create a for loop to loop over flash and print the values in the list. Use person as the loop variable.
•	Create an iterator for the list flash and assign the result to superspeed.
•	Print each of the items from superspeed using next() 4 times.

Answer / Script.py


# Create a list of strings: flash
flash = ['jay garrick', 'barry allen', 'wally west', 'bart allen']

# Print each list item in flash using a for loop
for item in flash:
  print(item)

# Create an iterator for flash: superspeed
superspeed = iter(flash)

# Print each item from the iterator
print(next(superspeed))
print(next(superspeed))
print(next(superspeed))
print(next(superspeed))


Iterating over iterables (2)
One of the things you learned about in this chapter is that not all iterables are actual lists. A couple of examples that we looked at are strings and the use of the range() function. In this exercise, we will focus on the range() function.
You can use range() in a for loop as if it's a list to be iterated over:
for i in range(5):
    print(i)
Recall that range() doesn't actually create the list; instead, it creates a range object with an iterator that produces the values until it reaches the limit (in the example, until the value 4). If range() created the actual list, calling it with a value of 1010010100 may not work, especially since a number as big as that may go over a regular computer's memory. The value 1010010100 is actually what's called a Googol which is a 1 followed by a hundred 0s. That's a huge number!
Your task for this exercise is to show that calling range() with 1010010100 won't actually pre-create the list.
Instructions
•	Create an iterator object small_value over range(3) using the function iter().
•	Using a for loop, iterate over range(3), printing the value for every iteration. Use num as the loop variable.
•	Create an iterator object googol over range(10 ** 100)
Answer / Script.py

# Create an iterator for range(3): small_value
small_value = iter (range(3))

# Print the values in small_value
print(next(small_value))
print(next(small_value))
print(next(small_value))

# Loop over range(3) and print the values
for i in range(3):
    print(i)

# Create an iterator for range(10 ** 100): googol
googol = iter(range(10 ** 100))

# Print the first 5 values from googol
print(next(googol))
print(next(googol))
print(next(googol))
print(next(googol))
print(next(googol))


Iterators as function arguments
You've been using the iter() function to get an iterator object, as well as the next() function to retrieve the values one by one from the iterator object.
There are also functions that take iterators as arguments. For example, the list() and sum() functions return a list and the sum of elements, respectively.
In this exercise, you will use these functions by passing an iterator from range() and then printing the results of the function calls.
Instructions
•	Create a range object that would produce the values from 10 to 20 using range(). Assign the result to values.
•	Use the list() function to create a list of values from the range object values. Assign the result to values_list.
•	Use the sum() function to get the sum of the values from 10 to 20 from the range object values. Assign the result to values_sum.

Answer / Script.py

# Create a range object: values
values = range(10, 21)

# Print the range object
print(values)

# Create a list of integers: values_list
values_list = list(range(10, 21))

# Print values_list
print(values_list)

# Get the sum of values: values_sum
values_sum = sum(range(10, 21))

# Print values_sum
print(values_sum)


