Importing flat files from the web: your turn!
You are about to import your first file from the web! The flat file you will import will be 'winequality-red.csv' from the University of California, Irvine's Machine Learning repository. The flat file contains tabular data of physiochemical properties of red wine, such as pH, alcohol content and citric acid content, along with wine quality rating.
The URL of the file is
'https://s3.amazonaws.com/assets.datacamp.com/production/course_1606/datasets/winequality-red.csv'
After you import it, you'll check your working directory to confirm that it is there and then you'll load it into a pandas DataFrame.
Instructions
•	Import the function urlretrieve from the subpackage urllib.request.
•	Assign the URL of the file to the variable url.
•	Use the function urlretrieve() to save the file locally as 'winequality-red.csv'.
•	Execute the remaining code to load 'winequality-red.csv' in a pandas DataFrame and to print its head to the shell.
Script.py
# Import package
from urllib.request import urlretrieve

# Import pandas
import pandas as pd

# Assign url of file: url
url ='https://s3.amazonaws.com/assets.datacamp.com/production/course_1606/datasets/winequality-red.csv' 

# Save file locally
urlretrieve(url,'winequality-red.csv')

# Read file into a DataFrame and print its head
df = pd.read_csv('winequality-red.csv', sep=';')
print(df.head())

IPython Shell

fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \
0            7.4              0.70         0.00             1.9      0.076   
1            7.8              0.88         0.00             2.6      0.098   
2            7.8              0.76         0.04             2.3      0.092   
3           11.2              0.28         0.56             1.9      0.075   
4            7.4              0.70         0.00             1.9      0.076   

   free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \
0                 11.0                  34.0   0.9978  3.51       0.56   
1                 25.0                  67.0   0.9968  3.20       0.68   
2                 15.0                  54.0   0.9970  3.26       0.65   
3                 17.0                  60.0   0.9980  3.16       0.58   
4                 11.0                  34.0   0.9978  3.51       0.56   

   alcohol  quality  
0      9.4        5  
1      9.8        5  
2      9.8        5  
3      9.8        6  
4      9.4        5

<script.py> output:
       fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \
    0            7.4              0.70         0.00             1.9      0.076   
    1            7.8              0.88         0.00             2.6      0.098   
    2            7.8              0.76         0.04             2.3      0.092   
    3           11.2              0.28         0.56             1.9      0.075   
    4            7.4              0.70         0.00             1.9      0.076   
    
       free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \
    0                 11.0                  34.0   0.9978  3.51       0.56   
    1                 25.0                  67.0   0.9968  3.20       0.68   
    2                 15.0                  54.0   0.9970  3.26       0.65   
    3                 17.0                  60.0   0.9980  3.16       0.58   
    4                 11.0                  34.0   0.9978  3.51       0.56   
    
       alcohol  quality  
    0      9.4        5  
    1      9.8        5  
    2      9.8        5  
    3      9.8        6  
    4      9.4        5


Opening and reading flat files from the web
You have just imported a file from the web, saved it locally and loaded it into a DataFrame. If you just wanted to load a file from the web into a DataFrame without first saving it locally, you can do that easily using pandas. In particular, you can use the function pd.read_csv() with the URL as the first argument and the separator sep as the second argument.
The URL of the file, once again, is
'https://s3.amazonaws.com/assets.datacamp.com/production/course_1606/datasets/winequality-red.csv'
Instructions
•	Assign the URL of the file to the variable url.
•	Read file into a DataFrame df using pd.read_csv(), recalling that the separator in the file is ';'.
•	Print the head of the DataFrame df.
•	Execute the rest of the code to plot histogram of the first feature in the DataFrame df.

Script.py


# Import packages
import matplotlib.pyplot as plt
import pandas as pd

# Assign url of file: url
url = 'https://s3.amazonaws.com/assets.datacamp.com/production/course_1606/datasets/winequality-red.csv'

# Read file into a DataFrame: df
df = pd.read_csv(url, sep=';')

# Print the head of the DataFrame
print(df.head())

# Plot first column of df
pd.DataFrame.hist(df.ix[:, 0:1])
plt.xlabel('fixed acidity (g(tartaric acid)/dm$^3$)')
plt.ylabel('count')
plt.show()


IPython Shell

<script.py> output:
       fixed acidity  volatile acidity  citric acid  residual sugar  chlorides  \
    0            7.4              0.70         0.00             1.9      0.076   
    1            7.8              0.88         0.00             2.6      0.098   
    2            7.8              0.76         0.04             2.3      0.092   
    3           11.2              0.28         0.56             1.9      0.075   
    4            7.4              0.70         0.00             1.9      0.076   
    
       free sulfur dioxide  total sulfur dioxide  density    pH  sulphates  \
    0                 11.0                  34.0   0.9978  3.51       0.56   
    1                 25.0                  67.0   0.9968  3.20       0.68   
    2                 15.0                  54.0   0.9970  3.26       0.65   
    3                 17.0                  60.0   0.9980  3.16       0.58   
    4                 11.0                  34.0   0.9978  3.51       0.56   
    
       alcohol  quality  
    0      9.4        5  
    1      9.8        5  
    2      9.8        5  
    3      9.8        6  
    4      9.4        5



 


Importing non-flat files from the web
Congrats! You've just loaded a flat file from the web into a DataFrame without first saving it locally using the pandas function pd.read_csv(). This function is super cool because it has close relatives that allow you to load all types of files, not only flat ones. In this interactive exercise, you'll use pd.read_excel() to import an Excel spreadsheet.
The URL of the spreadsheet is
'http://s3.amazonaws.com/assets.datacamp.com/course/importing_data_into_r/latitude.xls'
Your job is to use pd.read_excel() to read in all of its sheets, print the sheet names and then print the head of the first sheet using its name, not its index.
Note that the output of pd.read_excel() is a Python dictionary with sheet names as keys and corresponding DataFrames as corresponding values.
Instructions
•	Assign the URL of the file to the variable url.
•	Read the file in url into a dictionary xl using pd.read_excel()recalling that, in order to import all sheets you need to pass None to the argument sheetname.
•	Print the names of the sheets in the Excel spreadsheet; these will be the keys of the dictionary xl.
•	Print the head of the first sheet using the sheet name, not the index of the sheet! The sheet name is '1700'

Script.py

# Import package
import pandas as pd

# Assign url of file: url
url = 'http://s3.amazonaws.com/assets.datacamp.com/course/importing_data_into_r/latitude.xls'

# Read in all sheets of Excel file: xl
xl = pd.read_excel(url, sheetname = None)

# Print the sheetnames to the shell
print(xl)

# Print the head of the first sheet (using its name, NOT its index)
print(xl.keys())
print(xl['1700'].head())



IPython Shell

{'1900':                       country       1900
0                 Afghanistan  34.565000
1       Akrotiri and Dhekelia  34.616667
2                     Albania  41.312000
3                     Algeria  36.720000
4              American Samoa -14.307000
5                     Andorra  42.546000
6                      Angola  -8.843000
7                    Anguilla  18.250000
8         Antigua and Barbuda  17.072000
9                   Argentina -36.676000
10                    Armenia  40.254000
11                      Aruba  12.513000
12                  Australia -32.219000
13                    Austria  48.231000
14                 Azerbaijan  40.352000
15                    Bahamas  24.700000
16                    Bahrain  26.024000
17                 Bangladesh  23.880000
18                   Barbados  13.179000
19                    Belarus  53.547090
20                    Belgium  50.837000
21                     Belize  17.843000
22                      Benin   6.364000
23                    Bermuda  32.217000
24                     Bhutan  27.479000
25                    Bolivia -15.190000
26     Bosnia and Herzegovina  44.175010
27                   Botswana -21.536000
28                     Brazil -19.557000
29     British Virgin Islands  18.500000
..                        ...        ...
216                      Togo   6.194000
217                   Tokelau  -9.000000
218                     Tonga -21.173000
219       Trinidad and Tobago  10.418000
220                   Tunisia  36.816000
221                    Turkey  41.202000
222              Turkmenistan  39.129380
223  Turks and Caicos Islands  21.750000
224                    Tuvalu  -8.000000
225                    Uganda   0.228000
226                   Ukraine  50.281000
227      United Arab Emirates  23.390000
228            United Kingdom  51.510000
229             United States  34.360000
230                   Uruguay -34.822000
231                      USSR        NaN
232                Uzbekistan  41.272000
233          Wallis et Futuna -13.300000
234                   Vanuatu -15.233000
235                 Venezuela   9.843000
236        West Bank and Gaza  31.416667
237              West Germany        NaN
238            Western Sahara  24.619130
239                   Vietnam  10.798000
240     Virgin Islands (U.S.)  17.736000
241               Yemen, Rep.  15.228000
242                Yugoslavia        NaN
243                    Zambia -12.942000
244                  Zimbabwe -17.876000
245                     Åland  60.000000

[246 rows x 2 columns], '1700':                       country       1700
0                 Afghanistan  34.565000
1       Akrotiri and Dhekelia  34.616667
2                     Albania  41.312000
3                     Algeria  36.720000
4              American Samoa -14.307000
5                     Andorra  42.546000
6                      Angola  -8.843000
7                    Anguilla  18.250000
8         Antigua and Barbuda  17.072000
9                   Argentina -36.676000
10                    Armenia  40.254000
11                      Aruba  12.513000
12                  Australia -32.219000
13                    Austria  48.231000
14                 Azerbaijan  40.352000
15                    Bahamas  24.700000
16                    Bahrain  26.024000
17                 Bangladesh  23.880000
18                   Barbados  13.179000
19                    Belarus  53.547090
20                    Belgium  50.837000
21                     Belize  17.843000
22                      Benin   6.364000
23                    Bermuda  32.217000
24                     Bhutan  27.479000
25                    Bolivia -15.190000
26     Bosnia and Herzegovina  44.175010
27                   Botswana -21.536000
28                     Brazil -19.557000
29     British Virgin Islands  18.500000
..                        ...        ...
216                      Togo   6.194000
217                   Tokelau  -9.000000
218                     Tonga -21.173000
219       Trinidad and Tobago  10.418000
220                   Tunisia  36.816000
221                    Turkey  41.202000
222              Turkmenistan  39.129380
223  Turks and Caicos Islands  21.750000
224                    Tuvalu  -8.000000
225                    Uganda   0.228000
226                   Ukraine  50.281000
227      United Arab Emirates  23.390000
228            United Kingdom  51.510000
229             United States  34.360000
230                   Uruguay -34.822000
231                      USSR        NaN
232                Uzbekistan  41.272000
233          Wallis et Futuna -13.300000
234                   Vanuatu -15.233000
235                 Venezuela   9.843000
236        West Bank and Gaza  31.416667
237              West Germany        NaN
238            Western Sahara  24.619130
239                   Vietnam  10.798000
240     Virgin Islands (U.S.)  17.736000
241               Yemen, Rep.  15.228000
242                Yugoslavia        NaN
243                    Zambia -12.942000
244                  Zimbabwe -17.876000
245                     Åland  60.000000

[246 rows x 2 columns]}
                 country       1700
0            Afghanistan  34.565000
1  Akrotiri and Dhekelia  34.616667
2                Albania  41.312000
3                Algeria  36.720000
4         American Samoa -14.307000

<script.py> output:
    {'1900':                       country       1900
    0                 Afghanistan  34.565000
    1       Akrotiri and Dhekelia  34.616667
    2                     Albania  41.312000
    3                     Algeria  36.720000
    4              American Samoa -14.307000
    5                     Andorra  42.546000
    6                      Angola  -8.843000
    7                    Anguilla  18.250000
    8         Antigua and Barbuda  17.072000
    9                   Argentina -36.676000
    10                    Armenia  40.254000
    11                      Aruba  12.513000
    12                  Australia -32.219000
    13                    Austria  48.231000
    14                 Azerbaijan  40.352000
    15                    Bahamas  24.700000
    16                    Bahrain  26.024000
    17                 Bangladesh  23.880000
    18                   Barbados  13.179000
    19                    Belarus  53.547090
    20                    Belgium  50.837000
    21                     Belize  17.843000
    22                      Benin   6.364000
    23                    Bermuda  32.217000
    24                     Bhutan  27.479000
    25                    Bolivia -15.190000
    26     Bosnia and Herzegovina  44.175010
    27                   Botswana -21.536000
    28                     Brazil -19.557000
    29     British Virgin Islands  18.500000
    ..                        ...        ...
    216                      Togo   6.194000
    217                   Tokelau  -9.000000
    218                     Tonga -21.173000
    219       Trinidad and Tobago  10.418000
    220                   Tunisia  36.816000
    221                    Turkey  41.202000
    222              Turkmenistan  39.129380
    223  Turks and Caicos Islands  21.750000
    224                    Tuvalu  -8.000000
    225                    Uganda   0.228000
    226                   Ukraine  50.281000
    227      United Arab Emirates  23.390000
    228            United Kingdom  51.510000
    229             United States  34.360000
    230                   Uruguay -34.822000
    231                      USSR        NaN
    232                Uzbekistan  41.272000
    233          Wallis et Futuna -13.300000
    234                   Vanuatu -15.233000
    235                 Venezuela   9.843000
    236        West Bank and Gaza  31.416667
    237              West Germany        NaN
    238            Western Sahara  24.619130
    239                   Vietnam  10.798000
    240     Virgin Islands (U.S.)  17.736000
    241               Yemen, Rep.  15.228000
    242                Yugoslavia        NaN
    243                    Zambia -12.942000
    244                  Zimbabwe -17.876000
    245                     Åland  60.000000
    
    [246 rows x 2 columns], '1700':                       country       1700
    0                 Afghanistan  34.565000
    1       Akrotiri and Dhekelia  34.616667
    2                     Albania  41.312000
    3                     Algeria  36.720000
    4              American Samoa -14.307000
    5                     Andorra  42.546000
    6                      Angola  -8.843000
    7                    Anguilla  18.250000
    8         Antigua and Barbuda  17.072000
    9                   Argentina -36.676000
    10                    Armenia  40.254000
    11                      Aruba  12.513000
    12                  Australia -32.219000
    13                    Austria  48.231000
    14                 Azerbaijan  40.352000
    15                    Bahamas  24.700000
    16                    Bahrain  26.024000
    17                 Bangladesh  23.880000
    18                   Barbados  13.179000
    19                    Belarus  53.547090
    20                    Belgium  50.837000
    21                     Belize  17.843000
    22                      Benin   6.364000
    23                    Bermuda  32.217000
    24                     Bhutan  27.479000
    25                    Bolivia -15.190000
    26     Bosnia and Herzegovina  44.175010
    27                   Botswana -21.536000
    28                     Brazil -19.557000
    29     British Virgin Islands  18.500000
    ..                        ...        ...
    216                      Togo   6.194000
    217                   Tokelau  -9.000000
    218                     Tonga -21.173000
    219       Trinidad and Tobago  10.418000
    220                   Tunisia  36.816000
    221                    Turkey  41.202000
    222              Turkmenistan  39.129380
    223  Turks and Caicos Islands  21.750000
    224                    Tuvalu  -8.000000
    225                    Uganda   0.228000
    226                   Ukraine  50.281000
    227      United Arab Emirates  23.390000
    228            United Kingdom  51.510000
    229             United States  34.360000
    230                   Uruguay -34.822000
    231                      USSR        NaN
    232                Uzbekistan  41.272000
    233          Wallis et Futuna -13.300000
    234                   Vanuatu -15.233000
    235                 Venezuela   9.843000
    236        West Bank and Gaza  31.416667
    237              West Germany        NaN
    238            Western Sahara  24.619130
    239                   Vietnam  10.798000
    240     Virgin Islands (U.S.)  17.736000
    241               Yemen, Rep.  15.228000
    242                Yugoslavia        NaN
    243                    Zambia -12.942000
    244                  Zimbabwe -17.876000
    245                     Åland  60.000000
    
    [246 rows x 2 columns]}
                     country       1700
    0            Afghanistan  34.565000
    1  Akrotiri and Dhekelia  34.616667
    2                Albania  41.312000
    3                Algeria  36.720000
    4         American Samoa -14.307000

<script.py> output:
    {'1900':                       country       1900
    0                 Afghanistan  34.565000
    1       Akrotiri and Dhekelia  34.616667
    2                     Albania  41.312000
    3                     Algeria  36.720000
    4              American Samoa -14.307000
    5                     Andorra  42.546000
    6                      Angola  -8.843000
    7                    Anguilla  18.250000
    8         Antigua and Barbuda  17.072000
    9                   Argentina -36.676000
    10                    Armenia  40.254000
    11                      Aruba  12.513000
    12                  Australia -32.219000
    13                    Austria  48.231000
    14                 Azerbaijan  40.352000
    15                    Bahamas  24.700000
    16                    Bahrain  26.024000
    17                 Bangladesh  23.880000
    18                   Barbados  13.179000
    19                    Belarus  53.547090
    20                    Belgium  50.837000
    21                     Belize  17.843000
    22                      Benin   6.364000
    23                    Bermuda  32.217000
    24                     Bhutan  27.479000
    25                    Bolivia -15.190000
    26     Bosnia and Herzegovina  44.175010
    27                   Botswana -21.536000
    28                     Brazil -19.557000
    29     British Virgin Islands  18.500000
    ..                        ...        ...
    216                      Togo   6.194000
    217                   Tokelau  -9.000000
    218                     Tonga -21.173000
    219       Trinidad and Tobago  10.418000
    220                   Tunisia  36.816000
    221                    Turkey  41.202000
    222              Turkmenistan  39.129380
    223  Turks and Caicos Islands  21.750000
    224                    Tuvalu  -8.000000
    225                    Uganda   0.228000
    226                   Ukraine  50.281000
    227      United Arab Emirates  23.390000
    228            United Kingdom  51.510000
    229             United States  34.360000
    230                   Uruguay -34.822000
    231                      USSR        NaN
    232                Uzbekistan  41.272000
    233          Wallis et Futuna -13.300000
    234                   Vanuatu -15.233000
    235                 Venezuela   9.843000
    236        West Bank and Gaza  31.416667
    237              West Germany        NaN
    238            Western Sahara  24.619130
    239                   Vietnam  10.798000
    240     Virgin Islands (U.S.)  17.736000
    241               Yemen, Rep.  15.228000
    242                Yugoslavia        NaN
    243                    Zambia -12.942000
    244                  Zimbabwe -17.876000
    245                     Åland  60.000000
    
    [246 rows x 2 columns], '1700':                       country       1700
    0                 Afghanistan  34.565000
    1       Akrotiri and Dhekelia  34.616667
    2                     Albania  41.312000
    3                     Algeria  36.720000
    4              American Samoa -14.307000
    5                     Andorra  42.546000
    6                      Angola  -8.843000
    7                    Anguilla  18.250000
    8         Antigua and Barbuda  17.072000
    9                   Argentina -36.676000
    10                    Armenia  40.254000
    11                      Aruba  12.513000
    12                  Australia -32.219000
    13                    Austria  48.231000
    14                 Azerbaijan  40.352000
    15                    Bahamas  24.700000
    16                    Bahrain  26.024000
    17                 Bangladesh  23.880000
    18                   Barbados  13.179000
    19                    Belarus  53.547090
    20                    Belgium  50.837000
    21                     Belize  17.843000
    22                      Benin   6.364000
    23                    Bermuda  32.217000
    24                     Bhutan  27.479000
    25                    Bolivia -15.190000
    26     Bosnia and Herzegovina  44.175010
    27                   Botswana -21.536000
    28                     Brazil -19.557000
    29     British Virgin Islands  18.500000
    ..                        ...        ...
    216                      Togo   6.194000
    217                   Tokelau  -9.000000
    218                     Tonga -21.173000
    219       Trinidad and Tobago  10.418000
    220                   Tunisia  36.816000
    221                    Turkey  41.202000
    222              Turkmenistan  39.129380
    223  Turks and Caicos Islands  21.750000
    224                    Tuvalu  -8.000000
    225                    Uganda   0.228000
    226                   Ukraine  50.281000
    227      United Arab Emirates  23.390000
    228            United Kingdom  51.510000
    229             United States  34.360000
    230                   Uruguay -34.822000
    231                      USSR        NaN
    232                Uzbekistan  41.272000
    233          Wallis et Futuna -13.300000
    234                   Vanuatu -15.233000
    235                 Venezuela   9.843000
    236        West Bank and Gaza  31.416667
    237              West Germany        NaN
    238            Western Sahara  24.619130
    239                   Vietnam  10.798000
    240     Virgin Islands (U.S.)  17.736000
    241               Yemen, Rep.  15.228000
    242                Yugoslavia        NaN
    243                    Zambia -12.942000
    244                  Zimbabwe -17.876000
    245                     Åland  60.000000
    
    [246 rows x 2 columns]}
    dict_keys(['1900', '1700'])
                     country       1700
    0            Afghanistan  34.565000
    1  Akrotiri and Dhekelia  34.616667
    2                Albania  41.312000
    3                Algeria  36.720000
    4         American Samoa -14.307000

Performing HTTP requests in Python using urllib
Now that you know the basics behind HTTP GET requests, it's time to perform some of your own. In this interactive exercise, you will ping our very own DataCamp servers to perform a GET request to extract information from our teach page, "http://www.datacamp.com/teach/documentation".
In the next exercise, you'll extract the HTML itself. Right now, however, you are going to package and send the request and then catch the response.
Instructions
•	Import the functions urlopen and Request from the subpackage urllib.request.
•	Package the request to the url "http://www.datacamp.com/teach/documentation" using the function Request() and assign it to request.
•	Send the request and catch the response in the variable response with the function urlopen().
•	Run the rest of the code to see the datatype of response and to close the connection!


Script.py

# Import packages
from urllib.request import urlopen, Request

# Specify the url
url = "http://www.datacamp.com/teach/documentation"

# This packages the request: request
request = Request(url)

# Sends the request and catches the response: response
response = urlopen(request)

# Print the datatype of response
print(type(response))

# Be polite and close the response!
response.close()

IPython Shell

<script.py> output:
    <class 'http.client.HTTPResponse'>


Printing HTTP request results in Python using urllib
You have just packaged and sent a GET request to "http://www.datacamp.com/teach/documentation" and then caught the response. You saw that such a response is a http.client.HTTPResponseobject. The question remains: what can you do with this response?
Well, as it came from an HTML page, you could read it to extract the HTML and, in fact, such a http.client.HTTPResponse object has an associated read() method. In this exercise, you'll build on your previous great work to extract the response and print the HTML.
Instructions
•	Send the request and catch the response in the variable response with the function urlopen(), as in the previous exercise.
•	Extract the response using the read() method and store the result in the variable html.
•	Print the string html.
•	Hit submit to perform all of the above and to close the response: be tidy!

Script.py
# Import packages
from urllib.request import urlopen, Request

# Specify the url
url = "http://www.datacamp.com/teach/documentation"

# This packages the request
request = Request(url)

# Sends the request and catches the response: response
response = urlopen(request)

# Extract the response: html
html = response.read()

# Print the html
print (html)

# Be polite and close the response!
response.close()


IPython Shell

<script.py> output:
    b'<!doctype html>\n<html lang="en" data-direction="ltr">\n  <head>\n    <link href="https://fonts.intercomcdn.com" rel="preconnect" crossorigin>\n      <script src="https://www.googletagmanager.com/gtag/js?id=UA-39297847-9" async="async" nonce="POMDRVme7p9kpzQ9lPOrCEMmmX5btriK64KyXebjV4Q="></script>\n      <script nonce="POMDRVme7p9kpzQ9lPOrCEMmmX5btriK64KyXebjV4Q=">\n        window.dataLayer = window.dataLayer || [];\n        function gtag(){dataLayer.push(arguments);}\n        gtag(\'js\', new Date());\n        gtag(\'config\', \'UA-39297847-9\');\n</script>\n    <meta charset="utf-8">\n    <meta http-equiv="X-UA-Compatible" content="IE=edge">\n    <title>DataCamp Help Center</title>\n    <meta name="description" content="">\n    <meta name="viewport" content="width=device-width, initial-scale=1">\n      <meta name="intercom:trackingEvent" content="{&quot;name&quot;:&quot;Viewed Help Center&quot;,&quot;metadata&quot;:{&quot;action&quot;:&quot;viewed&quot;,&quot;object&quot;:&quot;educate_home&quot;,&quot;place&quot;:&quot;help_center&quot;,&quot;owner&quot;:&quot;educate&quot;}}" />\n\n    <link rel="stylesheet" media="all" href="https://intercom.help/_assets/application-d1f7d2f5ecbab279e0c25a70c759326b30d53b9cc5832e8fdc7973fe1bc09ce2.css" />\n    <link rel="canonical" href="http://instructor-support.datacamp.com/"/>\n\n        <link href="https://static.intercomassets.com/assets/educate/educate-favicon-64x64-at-2x-52016a3500a250d0b118c0a04ddd13b1a7364a27759483536dd1940bccdefc20.png" rel="shortcut icon" type="image/png" />\n      <style>\n        .header, .avatar__image-extra { background-color: #263e63; }\n        .article a, .c__primary { color: #263e63; }\n        .avatar__fallback { background-color: #263e63; }\n        article a.intercom-h2b-button { background-color: #263e63; border: 0; }\n      </style>\n\n      <meta property="og:title" content="DataCamp Help Center" />\n  <meta name="twitter:title" content="DataCamp Help Center" />\n\n\n<meta property="og:type" content="website" />\n<meta property="og:image" content="" />\n\n<meta name="twitter:image" content="" />\n\n  </head>\n  <body class="">\n    <header class="header">\n  <div class="container header__container o__ltr" dir="ltr">\n    <div class="content">\n      <div class="mo o__centered o__reversed header__meta_wrapper">\n        <div class="mo__body">\n          <div class="header__logo">\n            <a href="/">\n                <img alt="DataCamp Help Center" src="https://downloads.intercomcdn.com/i/o/81221/856b63d438031754b681746b/4ea2737e4266936fb423911d9c587812.png" />\n            </a>\n          </div>\n        </div>\n        <div class="mo__aside">\n          <div class="header__home__url">\n              <a target="_blank" rel=\'noopener\' href="http://www.datacamp.com/teach"><svg width="14" height="14" viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg"><title>Group 65</title><g stroke="#FFF" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"><path d="M11.5 6.73v6.77H.5v-11h7.615M4.5 9.5l7-7M13.5 5.5v-5h-5"/></g></svg><span>Go to DataCamp</span></a>\n          </div>\n        </div>\n      </div>\n          <h1 class="header__headline">Advice and answers from the DataCamp Team</h1>\n        <form action="/" autocomplete="off" class="header__form search">\n          <input type="text" autocomplete="off" class="search__input js__search-input o__ltr" placeholder="Search for articles..." tabindex="1" name="q" value="">\n          <div class="search_icons">\n            <button type="submit" class="search__submit o__ltr"></button>\n            <a class="search__clear-text__icon">\n              <svg class="interface-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">\n                <path d="M8.018 6.643L5.375 4 4 5.375l2.643 2.643L4 10.643 5.375 12l2.643-2.625L10.625 12 12 10.643 9.357 8.018 12 5.375 10.643 4z" />\n              </svg>\n            </a>\n        </form>\n      </div>\n    </div>\n  </div>\n</header>\n\n    <div class="container">\n      <div class="content educate_content"><section class="section">\n    <div class="g__space">\n      <a href="/getting-started" class="paper ">\n        <div class="collection o__ltr">\n          <div class="collection__photo">\n            <svg role=\'img\' viewBox=\'0 0 48 48\'><g id="chat-star" stroke-width="2" fill="none" fill-rule="evenodd" stroke-linejoin="round"><path d="M20 34.942c-2.083-.12-4.292-.42-6-.942L3 39l4-9c-3.858-3.086-6-7.246-6-12C1 8.61 10.328 1 21.835 1 33.343 1 43 8.61 43 18c0 1.044-.117 2.065-.342 3.057"></path><path d="M36.016 25L40 33h7l-6 5 3 9-8-5.494L28 47l3-9-6-5h7l4.016-8z"></path></g></svg>\n          </div>\n          <div class="collection_meta" dir="ltr">\n            <h2 class="t__h3 c__primary">Getting Started</h2>\n            <p class="paper__preview">Everything you need to know to begin your DataCamp journey!</p>\n            <div class="avatar">\n  <div class="avatar__photo avatars__images o__ltr">\n        <img src="https://static.intercomassets.com/avatars/2352718/square_128/Rebecca_Robins_-_Headshot-1535969735.jpg?1535969735" alt="Becca Robins avatar" class="avatar__image">\n\n        <img src="https://static.intercomassets.com/avatars/2678519/square_128/pic2-1539176502.JPG?1539176502" alt="Jen Bricker avatar" class="avatar__image">\n\n        <img src="https://static.intercomassets.com/avatars/2637958/square_128/YR_Headshot-1539175806.JPG?1539175806" alt="Yashas Roy avatar" class="avatar__image">\n\n      <span class="avatar__image avatar__fallback">+2</span>\n  </div>\n  <div class="avatar__info">\n    <div>\n      <span class="c__darker">\n        11 articles in this collection\n      </span>\n      <br>\n      Written by <span class=\'c__darker\'> Becca Robins,</span> <span class=\'c__darker\'> Jen Bricker,</span> <span class=\'c__darker\'> Yashas Roy</span> and 2 others\n    </div>\n  </div>\n</div>\n\n          </div>\n        </div>\n      </a>\n    </div>\n    <div class="g__space">\n      <a href="/courses" class="paper ">\n        <div class="collection o__ltr">\n          <div class="collection__photo">\n            <svg role=\'img\' viewBox=\'0 0 48 48\'><g id="devices-laptop" stroke-width="2" fill="none" fill-rule="evenodd" stroke-linecap="round"><path d="M41 31H7V11h34v20z"></path><path d="M3 35V10a3 3 0 0 1 3-3h36a3 3 0 0 1 3 3v25m-16 0v2H19v-2H1v4a2 2 0 0 0 2 2h42a2 2 0 0 0 2-2v-4H29z" stroke-linejoin="round"></path></g></svg>\n          </div>\n          <div class="collection_meta" dir="ltr">\n            <h2 class="t__h3 c__primary">Courses</h2>\n            <p class="paper__preview">Everything you need to know about creating DataCamp courses.</p>\n            <div class="avatar">\n  <div class="avatar__photo avatars__images o__ltr">\n        <img src="https://static.intercomassets.com/avatars/2637958/square_128/YR_Headshot-1539175806.JPG?1539175806" alt="Yashas Roy avatar" class="avatar__image">\n\n        <img src="https://static.intercomassets.com/avatars/2247397/square_128/IMG_2763_final_square_small-1532522734.jpg?1532522734" alt="Nick Carchedi avatar" class="avatar__image">\n\n        <img src="https://static.intercomassets.com/avatars/2366194/square_128/richie-in-hairnet-1537451295.JPG?1537451295" alt="Richie Cotton avatar" class="avatar__image">\n\n      <span class="avatar__image avatar__fallback">+7</span>\n  </div>\n  <div class="avatar__info">\n    <div>\n      <span class="c__darker">\n        81 articles in this collection\n      </span>\n      <br>\n      Written by <span class=\'c__darker\'> Yashas Roy,</span> <span class=\'c__darker\'> Nick Carchedi,</span> <span class=\'c__darker\'> Richie Cotton</span> and 7 others\n    </div>\n  </div>\n</div>\n\n          </div>\n        </div>\n      </a>\n    </div>\n    <div class="g__space">\n      <a href="/daily-practice" class="paper ">\n        <div class="collection o__ltr">\n          <div class="collection__photo">\n            <svg role=\'img\' viewBox=\'0 0 48 48\'><g id="tools-dashboard" stroke-width="2" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"><path d="M27 31a3 3 0 0 1-6 0 3 3 0 0 1 6 0zm-.88-2.12l9.9-9.9M5 32h4m34 .002L39 32m2.553-8.27l-3.696 1.53M31.27 13.447l-1.53 3.695M24 12v4m-7.27-2.553l1.53 3.695m-7.694.422l2.826 2.83M6.447 23.73l3.695 1.53"></path><path d="M24 8C11.297 8 1 18.3 1 31v9h46v-9C47 18.3 36.703 8 24 8z"></path></g></svg>\n          </div>\n          <div class="collection_meta" dir="ltr">\n            <h2 class="t__h3 c__primary">Daily Practice</h2>\n            <p class="paper__preview">Everything you need to know about creating DataCamp Daily Practice.</p>\n            <div class="avatar">\n  <div class="avatar__photo avatars__images o__ltr">\n        <img src="https://static.intercomassets.com/avatars/2734728/square_128/Anneleen_Beckers-xtra-small-1541624054.jpg?1541624054" alt="Anneleen Beckers avatar" class="avatar__image">\n\n  </div>\n  <div class="avatar__info">\n    <div>\n      <span class="c__darker">\n        13 articles in this collection\n      </span>\n      <br>\n      Written by <span class=\'c__darker\'> Anneleen Beckers</span>\n    </div>\n  </div>\n</div>\n\n          </div>\n        </div>\n      </a>\n    </div>\n    <div class="g__space">\n      <a href="/projects" class="paper ">\n        <div class="collection o__ltr">\n          <div class="collection__photo">\n            <svg role=\'img\' viewBox=\'0 0 48 48\'><g id="book-opened2"><path d="M24 11c0-3.866 10.297-7 23-7v33c-12.703 0-23 3.134-23 7 0-3.866-10.3-7-23-7V4c12.7 0 23 3.134 23 7zm0 0v32m-5-27.52c-3.22-1.232-7.773-2.128-13-2.48m13 8.48c-3.22-1.232-7.773-2.128-13-2.48m13 8.48c-3.22-1.232-7.773-2.128-13-2.48m13 8.48c-3.22-1.23-7.773-2.127-13-2.48m23-15.52c3.223-1.232 7.773-2.128 13-2.48m-13 8.48c3.223-1.232 7.773-2.128 13-2.48m-13 8.48c3.223-1.232 7.773-2.128 13-2.48m-13 8.48c3.223-1.23 7.773-2.127 13-2.48" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"></path></g></svg>\n          </div>\n          <div class="collection_meta" dir="ltr">\n            <h2 class="t__h3 c__primary">Projects</h2>\n            <p class="paper__preview">Everything you need to know about creating DataCamp projects.</p>\n            <div class="avatar">\n  <div class="avatar__photo avatars__images o__ltr">\n        <img src="https://static.intercomassets.com/avatars/2360843/square_128/20170928_DavidV_ByBBImagery-022-1380-1537479799.jpg?1537479799" alt="David Venturi avatar" class="avatar__image">\n\n  </div>\n  <div class="avatar__info">\n    <div>\n      <span class="c__darker">\n        19 articles in this collection\n      </span>\n      <br>\n      Written by <span class=\'c__darker\'> David Venturi</span>\n    </div>\n  </div>\n</div>\n\n          </div>\n        </div>\n      </a>\n    </div>\n    <div class="g__space">\n      <a href="/course-editor-basics" class="paper ">\n        <div class="collection o__ltr">\n          <div class="collection__photo">\n            <svg role=\'img\' viewBox=\'0 0 48 48\'><g id="book-bookmark" stroke-width="2" fill="none" fill-rule="evenodd" stroke-linecap="round"><path d="M35 31l-6-6-6 6V7h12v24z"></path><path d="M35 9h6v38H11a4 4 0 0 1-4-4V5" stroke-linejoin="round"></path><path d="M39 9V1H11a4 4 0 0 0 0 8h12" stroke-linejoin="round"></path></g></svg>\n          </div>\n          <div class="collection_meta" dir="ltr">\n            <h2 class="t__h3 c__primary">Course Editor Basics</h2>\n            <p class="paper__preview">Everything you need to know to get going with our online course editor.</p>\n            <div class="avatar">\n  <div class="avatar__photo avatars__images o__ltr">\n        <img src="https://static.intercomassets.com/avatars/2352718/square_128/Rebecca_Robins_-_Headshot-1535969735.jpg?1535969735" alt="Becca Robins avatar" class="avatar__image">\n\n        <img src="https://static.intercomassets.com/avatars/2247397/square_128/IMG_2763_final_square_small-1532522734.jpg?1532522734" alt="Nick Carchedi avatar" class="avatar__image">\n\n  </div>\n  <div class="avatar__info">\n    <div>\n      <span class="c__darker">\n        5 articles in this collection\n      </span>\n      <br>\n      Written by <span class=\'c__darker\'> Becca Robins</span> and <span class=\'c__darker\'> Nick Carchedi</span>\n    </div>\n  </div>\n</div>\n\n          </div>\n        </div>\n      </a>\n    </div>\n    <div class="g__space">\n      <a href="/tips-and-tricks" class="paper ">\n        <div class="collection o__ltr">\n          <div class="collection__photo">\n            <svg role=\'img\' viewBox=\'0 0 48 48\'><g id="comms-mail" stroke-width="2" fill="none" fill-rule="evenodd" stroke-linejoin="round"><path d="M47 3L1 22l18 7L47 3z"></path><path d="M47 3l-8 37-20-11L47 3zM19 29v16l7-12"></path></g></svg>\n          </div>\n          <div class="collection_meta" dir="ltr">\n            <h2 class="t__h3 c__primary">Tips &amp; Tricks</h2>\n            <p class="paper__preview">Become a DataCamp wizard!</p>\n            <div class="avatar">\n  <div class="avatar__photo avatars__images o__ltr">\n        <img src="https://static.intercomassets.com/avatars/2352718/square_128/Rebecca_Robins_-_Headshot-1535969735.jpg?1535969735" alt="Becca Robins avatar" class="avatar__image">\n\n  </div>\n  <div class="avatar__info">\n    <div>\n      <span class="c__darker">\n        6 articles in this collection\n      </span>\n      <br>\n      Written by <span class=\'c__darker\'> Becca Robins</span>\n    </div>\n  </div>\n</div>\n\n          </div>\n        </div>\n      </a>\n    </div>\n    <div class="g__space">\n      <a href="/frequently-asked-questions-faq" class="paper ">\n        <div class="collection o__ltr">\n          <div class="collection__photo">\n            <svg role=\'img\' viewBox=\'0 0 48 48\'><g id="chat-question" fill="none" fill-rule="evenodd"><path d="M47 21.268c0 10.363-10.297 18.765-23 18.765-2.835 0-5.55-.418-8.058-1.184L2.725 45 7.9 34.668c-4.258-3.406-6.9-8.15-6.9-13.4C1 10.904 11.297 2.502 24 2.502s23 8.402 23 18.766z" stroke-width="2" stroke-linejoin="round"></path><path d="M25 28.502a2 2 0 1 0 0 4 2 2 0 0 0 0-4" fill="#231F1F"></path><path d="M19 17.75c0-3.312 2.686-6.124 6-6.124 3.313 0 6 2.626 6 5.938 0 3.315-2.687 5.938-6 5.938V26" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></g></svg>\n          </div>\n          <div class="collection_meta" dir="ltr">\n            <h2 class="t__h3 c__primary">Frequently Asked Questions (FAQ)</h2>\n            <p class="paper__preview">Common questions that arise during content creation.</p>\n            <div class="avatar">\n  <div class="avatar__photo avatars__images o__ltr">\n        <img src="https://static.intercomassets.com/avatars/2352718/square_128/Rebecca_Robins_-_Headshot-1535969735.jpg?1535969735" alt="Becca Robins avatar" class="avatar__image">\n\n        <img src="https://static.intercomassets.com/avatars/2366194/square_128/richie-in-hairnet-1537451295.JPG?1537451295" alt="Richie Cotton avatar" class="avatar__image">\n\n        <img src="https://static.intercomassets.com/avatars/2637958/square_128/YR_Headshot-1539175806.JPG?1539175806" alt="Yashas Roy avatar" class="avatar__image">\n\n      <span class="avatar__image avatar__fallback">+3</span>\n  </div>\n  <div class="avatar__info">\n    <div>\n      <span class="c__darker">\n        48 articles in this collection\n      </span>\n      <br>\n      Written by <span class=\'c__darker\'> Becca Robins,</span> <span class=\'c__darker\'> Richie Cotton,</span> <span class=\'c__darker\'> Yashas Roy</span> and 3 others\n    </div>\n  </div>\n</div>\n\n          </div>\n        </div>\n      </a>\n    </div>\n    <div class="g__space">\n      <a href="/miscellaneous" class="paper ">\n        <div class="collection o__ltr">\n          <div class="collection__photo">\n            <svg role=\'img\' viewBox=\'0 0 48 48\'><g id="tools-edit"><path d="M14.932 43.968L2 47l3.033-12.93 31.2-31.203a4 4 0 0 1 5.658 0l4.247 4.243a4 4 0 0 1 0 5.656L14.932 43.968zm29.84-29.735L34.82 4.28m7.125 12.782L31.992 7.11M15.436 43.465l-9.9-9.9" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"></path></g></svg>\n          </div>\n          <div class="collection_meta" dir="ltr">\n            <h2 class="t__h3 c__primary">Miscellaneous</h2>\n            <p class="paper__preview">Have a question for DataCamp, but not about creating content? You&#39;ll probably find the answer here.</p>\n            <div class="avatar">\n  <div class="avatar__photo avatars__images o__ltr">\n        <img src="https://static.intercomassets.com/avatars/2352718/square_128/Rebecca_Robins_-_Headshot-1535969735.jpg?1535969735" alt="Becca Robins avatar" class="avatar__image">\n\n        <img src="https://static.intercomassets.com/avatars/2830289/square_128/IMG_0665_a-1545331304.jpg?1545331304" alt="Lisa Monteleone avatar" class="avatar__image">\n\n        <img src="https://static.intercomassets.com/avatars/2859053/square_128/gabriel_about_pic-1546620603.jpg?1546620603" alt="Gabriel de Selding avatar" class="avatar__image">\n\n  </div>\n  <div class="avatar__info">\n    <div>\n      <span class="c__darker">\n        9 articles in this collection\n      </span>\n      <br>\n      Written by <span class=\'c__darker\'> Becca Robins,</span> <span class=\'c__darker\'> Lisa Monteleone,</span> and <span class=\'c__darker\'> Gabriel de Selding</span>\n    </div>\n  </div>\n</div>\n\n          </div>\n        </div>\n      </a>\n    </div>\n</section>\n</div>\n    </div>\n    <footer class="footer">\n  <div class="container">\n    <div class="content">\n      <div class="u__cf"  dir="ltr">\n        <div class="footer__logo">\n          <a href="/">\n              <img alt="DataCamp Help Center" src="https://downloads.intercomcdn.com/i/o/81221/856b63d438031754b681746b/4ea2737e4266936fb423911d9c587812.png" />\n          </a>\n        </div>\n        <div class="footer__advert logo">\n          <img src="https://intercom.help/_assets/intercom-a6a6ac0f033657af1aebe2e9e15b94a3cd5eabf6ae8b9916df6ea49099a894d8.png" alt="Intercom" />\n          <a href="https://www.intercom.com/intercom-link?company=DataCamp&amp;solution=customer-support&amp;utm_campaign=intercom-link&amp;utm_content=We+run+on+Intercom&amp;utm_medium=help-center&amp;utm_referrer=http%3A%2F%2Finstructor-support.datacamp.com%2F&amp;utm_source=desktop-web">We run on Intercom</a>\n        </div>\n      </div>\n    </div>\n  </div>\n</footer>\n\n    \n  <script nonce="POMDRVme7p9kpzQ9lPOrCEMmmX5btriK64KyXebjV4Q=">\n    window.intercomSettings = {"app_id":"ug0ps1rq"};\n</script>\n  <script nonce="POMDRVme7p9kpzQ9lPOrCEMmmX5btriK64KyXebjV4Q=">\n    (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic(\'reattach_activator\');ic(\'update\',intercomSettings);}else{var d=document;var i=function(){i.c(arguments)};i.q=[];i.c=function(args){i.q.push(args)};w.Intercom=i;function l(){var s=d.createElement(\'script\');s.type=\'text/javascript\';s.async=true;s.src="https://widget.intercom.io/widget/ug0ps1rq";var x=d.getElementsByTagName(\'script\')[0];x.parentNode.insertBefore(s,x);}if(w.attachEvent){w.attachEvent(\'onload\',l);}else{w.addEventListener(\'load\',l,false);}}})()\n</script>\n\n    \n\n    <script src="https://intercom.help/_assets/application-4500b8159f32efa509d5464e27ebd8e4735c3a0e4b59bd4aab6c00e8e49c04d2.js" nonce="POMDRVme7p9kpzQ9lPOrCEMmmX5btriK64KyXebjV4Q="></script>\n  </body>\n</html>\n'

Performing HTTP requests in Python using requests
Now that you've got your head and hands around making HTTP requests using the urllib package, you're going to figure out how to do the same using the higher-level requests library. You'll once again be pinging DataCamp servers for their "http://www.datacamp.com/teach/documentation" page.
Note that unlike in the previous exercises using urllib, you don't have to close the connection when using requests!
Instructions
•	Import the package requests.
•	Assign the URL of interest to the variable url.
•	Package the request to the URL, send the request and catch the response with a single function requests.get(), assigning the response to the variable r.
•	Use the text attribute of the object r to return the HTML of the webpage as a string; store the result in a variable text.
•	Hit submit to print the HTML of the webpage.



Script.py

# Import package
import requests

# Specify the url: url
url = "http://www.datacamp.com/teach/documentation"

# Packages the request, send the request and catch the response: r
r = requests.get(url)

# Extract the response: text
text = r.text

# Print the html
print(text)

IPython Shell

<script.py> output:
    <!doctype html>
    <html lang="en" data-direction="ltr">
      <head>
        <link href="https://fonts.intercomcdn.com" rel="preconnect" crossorigin>
          <script src="https://www.googletagmanager.com/gtag/js?id=UA-39297847-9" async="async" nonce="qLbrjBbGPUaR0slnGjJEzCKHGpI7VQrWxDF5k6/7Mhs="></script>
          <script nonce="qLbrjBbGPUaR0slnGjJEzCKHGpI7VQrWxDF5k6/7Mhs=">
            window.dataLayer = window.dataLayer || [];
            function gtag(){dataLayer.push(arguments);}
            gtag('js', new Date());
            gtag('config', 'UA-39297847-9');
    </script>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <title>DataCamp Help Center</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1">
          <meta name="intercom:trackingEvent" content="{&quot;name&quot;:&quot;Viewed Help Center&quot;,&quot;metadata&quot;:{&quot;action&quot;:&quot;viewed&quot;,&quot;object&quot;:&quot;educate_home&quot;,&quot;place&quot;:&quot;help_center&quot;,&quot;owner&quot;:&quot;educate&quot;}}" />
    
        <link rel="stylesheet" media="all" href="https://intercom.help/_assets/application-d1f7d2f5ecbab279e0c25a70c759326b30d53b9cc5832e8fdc7973fe1bc09ce2.css" />
        <link rel="canonical" href="http://instructor-support.datacamp.com/"/>
    
            <link href="https://static.intercomassets.com/assets/educate/educate-favicon-64x64-at-2x-52016a3500a250d0b118c0a04ddd13b1a7364a27759483536dd1940bccdefc20.png" rel="shortcut icon" type="image/png" />
          <style>
            .header, .avatar__image-extra { background-color: #263e63; }
            .article a, .c__primary { color: #263e63; }
            .avatar__fallback { background-color: #263e63; }
            article a.intercom-h2b-button { background-color: #263e63; border: 0; }
          </style>
    
          <meta property="og:title" content="DataCamp Help Center" />
      <meta name="twitter:title" content="DataCamp Help Center" />
    
    
    <meta property="og:type" content="website" />
    <meta property="og:image" content="" />
    
    <meta name="twitter:image" content="" />
    
      </head>
      <body class="">
        <header class="header">
      <div class="container header__container o__ltr" dir="ltr">
        <div class="content">
          <div class="mo o__centered o__reversed header__meta_wrapper">
            <div class="mo__body">
              <div class="header__logo">
                <a href="/">
                    <img alt="DataCamp Help Center" src="https://downloads.intercomcdn.com/i/o/81221/856b63d438031754b681746b/4ea2737e4266936fb423911d9c587812.png" />
                </a>
              </div>
            </div>
            <div class="mo__aside">
              <div class="header__home__url">
                  <a target="_blank" rel='noopener' href="http://www.datacamp.com/teach"><svg width="14" height="14" viewBox="0 0 14 14" xmlns="http://www.w3.org/2000/svg"><title>Group 65</title><g stroke="#FFF" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"><path d="M11.5 6.73v6.77H.5v-11h7.615M4.5 9.5l7-7M13.5 5.5v-5h-5"/></g></svg><span>Go to DataCamp</span></a>
              </div>
            </div>
          </div>
              <h1 class="header__headline">Advice and answers from the DataCamp Team</h1>
            <form action="/" autocomplete="off" class="header__form search">
              <input type="text" autocomplete="off" class="search__input js__search-input o__ltr" placeholder="Search for articles..." tabindex="1" name="q" value="">
              <div class="search_icons">
                <button type="submit" class="search__submit o__ltr"></button>
                <a class="search__clear-text__icon">
                  <svg class="interface-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16">
                    <path d="M8.018 6.643L5.375 4 4 5.375l2.643 2.643L4 10.643 5.375 12l2.643-2.625L10.625 12 12 10.643 9.357 8.018 12 5.375 10.643 4z" />
                  </svg>
                </a>
            </form>
          </div>
        </div>
      </div>
    </header>
    
        <div class="container">
          <div class="content educate_content"><section class="section">
        <div class="g__space">
          <a href="/getting-started" class="paper ">
            <div class="collection o__ltr">
              <div class="collection__photo">
                <svg role='img' viewBox='0 0 48 48'><g id="chat-star" stroke-width="2" fill="none" fill-rule="evenodd" stroke-linejoin="round"><path d="M20 34.942c-2.083-.12-4.292-.42-6-.942L3 39l4-9c-3.858-3.086-6-7.246-6-12C1 8.61 10.328 1 21.835 1 33.343 1 43 8.61 43 18c0 1.044-.117 2.065-.342 3.057"></path><path d="M36.016 25L40 33h7l-6 5 3 9-8-5.494L28 47l3-9-6-5h7l4.016-8z"></path></g></svg>
              </div>
              <div class="collection_meta" dir="ltr">
                <h2 class="t__h3 c__primary">Getting Started</h2>
                <p class="paper__preview">Everything you need to know to begin your DataCamp journey!</p>
                <div class="avatar">
      <div class="avatar__photo avatars__images o__ltr">
            <img src="https://static.intercomassets.com/avatars/2352718/square_128/Rebecca_Robins_-_Headshot-1535969735.jpg?1535969735" alt="Becca Robins avatar" class="avatar__image">
    
            <img src="https://static.intercomassets.com/avatars/2678519/square_128/pic2-1539176502.JPG?1539176502" alt="Jen Bricker avatar" class="avatar__image">
    
            <img src="https://static.intercomassets.com/avatars/2637958/square_128/YR_Headshot-1539175806.JPG?1539175806" alt="Yashas Roy avatar" class="avatar__image">
    
          <span class="avatar__image avatar__fallback">+2</span>
      </div>
      <div class="avatar__info">
        <div>
          <span class="c__darker">
            11 articles in this collection
          </span>
          <br>
          Written by <span class='c__darker'> Becca Robins,</span> <span class='c__darker'> Jen Bricker,</span> <span class='c__darker'> Yashas Roy</span> and 2 others
        </div>
      </div>
    </div>
    
              </div>
            </div>
          </a>
        </div>
        <div class="g__space">
          <a href="/courses" class="paper ">
            <div class="collection o__ltr">
              <div class="collection__photo">
                <svg role='img' viewBox='0 0 48 48'><g id="devices-laptop" stroke-width="2" fill="none" fill-rule="evenodd" stroke-linecap="round"><path d="M41 31H7V11h34v20z"></path><path d="M3 35V10a3 3 0 0 1 3-3h36a3 3 0 0 1 3 3v25m-16 0v2H19v-2H1v4a2 2 0 0 0 2 2h42a2 2 0 0 0 2-2v-4H29z" stroke-linejoin="round"></path></g></svg>
              </div>
              <div class="collection_meta" dir="ltr">
                <h2 class="t__h3 c__primary">Courses</h2>
                <p class="paper__preview">Everything you need to know about creating DataCamp courses.</p>
                <div class="avatar">
      <div class="avatar__photo avatars__images o__ltr">
            <img src="https://static.intercomassets.com/avatars/2637958/square_128/YR_Headshot-1539175806.JPG?1539175806" alt="Yashas Roy avatar" class="avatar__image">
    
            <img src="https://static.intercomassets.com/avatars/2247397/square_128/IMG_2763_final_square_small-1532522734.jpg?1532522734" alt="Nick Carchedi avatar" class="avatar__image">
    
            <img src="https://static.intercomassets.com/avatars/2366194/square_128/richie-in-hairnet-1537451295.JPG?1537451295" alt="Richie Cotton avatar" class="avatar__image">
    
          <span class="avatar__image avatar__fallback">+7</span>
      </div>
      <div class="avatar__info">
        <div>
          <span class="c__darker">
            81 articles in this collection
          </span>
          <br>
          Written by <span class='c__darker'> Yashas Roy,</span> <span class='c__darker'> Nick Carchedi,</span> <span class='c__darker'> Richie Cotton</span> and 7 others
        </div>
      </div>
    </div>
    
              </div>
            </div>
          </a>
        </div>
        <div class="g__space">
          <a href="/daily-practice" class="paper ">
            <div class="collection o__ltr">
              <div class="collection__photo">
                <svg role='img' viewBox='0 0 48 48'><g id="tools-dashboard" stroke-width="2" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"><path d="M27 31a3 3 0 0 1-6 0 3 3 0 0 1 6 0zm-.88-2.12l9.9-9.9M5 32h4m34 .002L39 32m2.553-8.27l-3.696 1.53M31.27 13.447l-1.53 3.695M24 12v4m-7.27-2.553l1.53 3.695m-7.694.422l2.826 2.83M6.447 23.73l3.695 1.53"></path><path d="M24 8C11.297 8 1 18.3 1 31v9h46v-9C47 18.3 36.703 8 24 8z"></path></g></svg>
              </div>
              <div class="collection_meta" dir="ltr">
                <h2 class="t__h3 c__primary">Daily Practice</h2>
                <p class="paper__preview">Everything you need to know about creating DataCamp Daily Practice.</p>
                <div class="avatar">
      <div class="avatar__photo avatars__images o__ltr">
            <img src="https://static.intercomassets.com/avatars/2734728/square_128/Anneleen_Beckers-xtra-small-1541624054.jpg?1541624054" alt="Anneleen Beckers avatar" class="avatar__image">
    
      </div>
      <div class="avatar__info">
        <div>
          <span class="c__darker">
            13 articles in this collection
          </span>
          <br>
          Written by <span class='c__darker'> Anneleen Beckers</span>
        </div>
      </div>
    </div>
    
              </div>
            </div>
          </a>
        </div>
        <div class="g__space">
          <a href="/projects" class="paper ">
            <div class="collection o__ltr">
              <div class="collection__photo">
                <svg role='img' viewBox='0 0 48 48'><g id="book-opened2"><path d="M24 11c0-3.866 10.297-7 23-7v33c-12.703 0-23 3.134-23 7 0-3.866-10.3-7-23-7V4c12.7 0 23 3.134 23 7zm0 0v32m-5-27.52c-3.22-1.232-7.773-2.128-13-2.48m13 8.48c-3.22-1.232-7.773-2.128-13-2.48m13 8.48c-3.22-1.232-7.773-2.128-13-2.48m13 8.48c-3.22-1.23-7.773-2.127-13-2.48m23-15.52c3.223-1.232 7.773-2.128 13-2.48m-13 8.48c3.223-1.232 7.773-2.128 13-2.48m-13 8.48c3.223-1.232 7.773-2.128 13-2.48m-13 8.48c3.223-1.23 7.773-2.127 13-2.48" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"></path></g></svg>
              </div>
              <div class="collection_meta" dir="ltr">
                <h2 class="t__h3 c__primary">Projects</h2>
                <p class="paper__preview">Everything you need to know about creating DataCamp projects.</p>
                <div class="avatar">
      <div class="avatar__photo avatars__images o__ltr">
            <img src="https://static.intercomassets.com/avatars/2360843/square_128/20170928_DavidV_ByBBImagery-022-1380-1537479799.jpg?1537479799" alt="David Venturi avatar" class="avatar__image">
    
      </div>
      <div class="avatar__info">
        <div>
          <span class="c__darker">
            19 articles in this collection
          </span>
          <br>
          Written by <span class='c__darker'> David Venturi</span>
        </div>
      </div>
    </div>
    
              </div>
            </div>
          </a>
        </div>
        <div class="g__space">
          <a href="/course-editor-basics" class="paper ">
            <div class="collection o__ltr">
              <div class="collection__photo">
                <svg role='img' viewBox='0 0 48 48'><g id="book-bookmark" stroke-width="2" fill="none" fill-rule="evenodd" stroke-linecap="round"><path d="M35 31l-6-6-6 6V7h12v24z"></path><path d="M35 9h6v38H11a4 4 0 0 1-4-4V5" stroke-linejoin="round"></path><path d="M39 9V1H11a4 4 0 0 0 0 8h12" stroke-linejoin="round"></path></g></svg>
              </div>
              <div class="collection_meta" dir="ltr">
                <h2 class="t__h3 c__primary">Course Editor Basics</h2>
                <p class="paper__preview">Everything you need to know to get going with our online course editor.</p>
                <div class="avatar">
      <div class="avatar__photo avatars__images o__ltr">
            <img src="https://static.intercomassets.com/avatars/2352718/square_128/Rebecca_Robins_-_Headshot-1535969735.jpg?1535969735" alt="Becca Robins avatar" class="avatar__image">
    
            <img src="https://static.intercomassets.com/avatars/2247397/square_128/IMG_2763_final_square_small-1532522734.jpg?1532522734" alt="Nick Carchedi avatar" class="avatar__image">
    
      </div>
      <div class="avatar__info">
        <div>
          <span class="c__darker">
            5 articles in this collection
          </span>
          <br>
          Written by <span class='c__darker'> Becca Robins</span> and <span class='c__darker'> Nick Carchedi</span>
        </div>
      </div>
    </div>
    
              </div>
            </div>
          </a>
        </div>
        <div class="g__space">
          <a href="/tips-and-tricks" class="paper ">
            <div class="collection o__ltr">
              <div class="collection__photo">
                <svg role='img' viewBox='0 0 48 48'><g id="comms-mail" stroke-width="2" fill="none" fill-rule="evenodd" stroke-linejoin="round"><path d="M47 3L1 22l18 7L47 3z"></path><path d="M47 3l-8 37-20-11L47 3zM19 29v16l7-12"></path></g></svg>
              </div>
              <div class="collection_meta" dir="ltr">
                <h2 class="t__h3 c__primary">Tips &amp; Tricks</h2>
                <p class="paper__preview">Become a DataCamp wizard!</p>
                <div class="avatar">
      <div class="avatar__photo avatars__images o__ltr">
            <img src="https://static.intercomassets.com/avatars/2352718/square_128/Rebecca_Robins_-_Headshot-1535969735.jpg?1535969735" alt="Becca Robins avatar" class="avatar__image">
    
      </div>
      <div class="avatar__info">
        <div>
          <span class="c__darker">
            6 articles in this collection
          </span>
          <br>
          Written by <span class='c__darker'> Becca Robins</span>
        </div>
      </div>
    </div>
    
              </div>
            </div>
          </a>
        </div>
        <div class="g__space">
          <a href="/frequently-asked-questions-faq" class="paper ">
            <div class="collection o__ltr">
              <div class="collection__photo">
                <svg role='img' viewBox='0 0 48 48'><g id="chat-question" fill="none" fill-rule="evenodd"><path d="M47 21.268c0 10.363-10.297 18.765-23 18.765-2.835 0-5.55-.418-8.058-1.184L2.725 45 7.9 34.668c-4.258-3.406-6.9-8.15-6.9-13.4C1 10.904 11.297 2.502 24 2.502s23 8.402 23 18.766z" stroke-width="2" stroke-linejoin="round"></path><path d="M25 28.502a2 2 0 1 0 0 4 2 2 0 0 0 0-4" fill="#231F1F"></path><path d="M19 17.75c0-3.312 2.686-6.124 6-6.124 3.313 0 6 2.626 6 5.938 0 3.315-2.687 5.938-6 5.938V26" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"></path></g></svg>
              </div>
              <div class="collection_meta" dir="ltr">
                <h2 class="t__h3 c__primary">Frequently Asked Questions (FAQ)</h2>
                <p class="paper__preview">Common questions that arise during content creation.</p>
                <div class="avatar">
      <div class="avatar__photo avatars__images o__ltr">
            <img src="https://static.intercomassets.com/avatars/2352718/square_128/Rebecca_Robins_-_Headshot-1535969735.jpg?1535969735" alt="Becca Robins avatar" class="avatar__image">
    
            <img src="https://static.intercomassets.com/avatars/2366194/square_128/richie-in-hairnet-1537451295.JPG?1537451295" alt="Richie Cotton avatar" class="avatar__image">
    
            <img src="https://static.intercomassets.com/avatars/2637958/square_128/YR_Headshot-1539175806.JPG?1539175806" alt="Yashas Roy avatar" class="avatar__image">
    
          <span class="avatar__image avatar__fallback">+3</span>
      </div>
      <div class="avatar__info">
        <div>
          <span class="c__darker">
            48 articles in this collection
          </span>
          <br>
          Written by <span class='c__darker'> Becca Robins,</span> <span class='c__darker'> Richie Cotton,</span> <span class='c__darker'> Yashas Roy</span> and 3 others
        </div>
      </div>
    </div>
    
              </div>
            </div>
          </a>
        </div>
        <div class="g__space">
          <a href="/miscellaneous" class="paper ">
            <div class="collection o__ltr">
              <div class="collection__photo">
                <svg role='img' viewBox='0 0 48 48'><g id="tools-edit"><path d="M14.932 43.968L2 47l3.033-12.93 31.2-31.203a4 4 0 0 1 5.658 0l4.247 4.243a4 4 0 0 1 0 5.656L14.932 43.968zm29.84-29.735L34.82 4.28m7.125 12.782L31.992 7.11M15.436 43.465l-9.9-9.9" stroke-width="2" fill="none" stroke-linecap="round" stroke-linejoin="round"></path></g></svg>
              </div>
              <div class="collection_meta" dir="ltr">
                <h2 class="t__h3 c__primary">Miscellaneous</h2>
                <p class="paper__preview">Have a question for DataCamp, but not about creating content? You&#39;ll probably find the answer here.</p>
                <div class="avatar">
      <div class="avatar__photo avatars__images o__ltr">
            <img src="https://static.intercomassets.com/avatars/2352718/square_128/Rebecca_Robins_-_Headshot-1535969735.jpg?1535969735" alt="Becca Robins avatar" class="avatar__image">
    
            <img src="https://static.intercomassets.com/avatars/2830289/square_128/IMG_0665_a-1545331304.jpg?1545331304" alt="Lisa Monteleone avatar" class="avatar__image">
    
            <img src="https://static.intercomassets.com/avatars/2859053/square_128/gabriel_about_pic-1546620603.jpg?1546620603" alt="Gabriel de Selding avatar" class="avatar__image">
    
      </div>
      <div class="avatar__info">
        <div>
          <span class="c__darker">
            9 articles in this collection
          </span>
          <br>
          Written by <span class='c__darker'> Becca Robins,</span> <span class='c__darker'> Lisa Monteleone,</span> and <span class='c__darker'> Gabriel de Selding</span>
        </div>
      </div>
    </div>
    
              </div>
            </div>
          </a>
        </div>
    </section>
    </div>
        </div>
        <footer class="footer">
      <div class="container">
        <div class="content">
          <div class="u__cf"  dir="ltr">
            <div class="footer__logo">
              <a href="/">
                  <img alt="DataCamp Help Center" src="https://downloads.intercomcdn.com/i/o/81221/856b63d438031754b681746b/4ea2737e4266936fb423911d9c587812.png" />
              </a>
            </div>
            <div class="footer__advert logo">
              <img src="https://intercom.help/_assets/intercom-a6a6ac0f033657af1aebe2e9e15b94a3cd5eabf6ae8b9916df6ea49099a894d8.png" alt="Intercom" />
              <a href="https://www.intercom.com/intercom-link?company=DataCamp&amp;solution=customer-support&amp;utm_campaign=intercom-link&amp;utm_content=We+run+on+Intercom&amp;utm_medium=help-center&amp;utm_referrer=http%3A%2F%2Finstructor-support.datacamp.com%2F&amp;utm_source=desktop-web">We run on Intercom</a>
            </div>
          </div>
        </div>
      </div>
    </footer>
    
        
      <script nonce="qLbrjBbGPUaR0slnGjJEzCKHGpI7VQrWxDF5k6/7Mhs=">
        window.intercomSettings = {"app_id":"ug0ps1rq"};
    </script>
      <script nonce="qLbrjBbGPUaR0slnGjJEzCKHGpI7VQrWxDF5k6/7Mhs=">
        (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',intercomSettings);}else{var d=document;var i=function(){i.c(arguments)};i.q=[];i.c=function(args){i.q.push(args)};w.Intercom=i;function l(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src="https://widget.intercom.io/widget/ug0ps1rq";var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);}if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})()
    </script>
    
        
    
        <script src="https://intercom.help/_assets/application-4500b8159f32efa509d5464e27ebd8e4735c3a0e4b59bd4aab6c00e8e49c04d2.js" nonce="qLbrjBbGPUaR0slnGjJEzCKHGpI7VQrWxDF5k6/7Mhs="></script>
      </body>
    </html>


Parsing HTML with BeautifulSoup
In this interactive exercise, you'll learn how to use the BeautifulSoup package to parse, prettify and extract information from HTML. You'll scrape the data from the webpage of Guido van Rossum, Python's very own Benevolent Dictator for Life. In the following exercises, you'll prettify the HTML and then extract the text and the hyperlinks.
The URL of interest is url = 'https://www.python.org/~guido/'.
Instructions
100 XP
•	Import the function BeautifulSoup from the package bs4.
•	Assign the URL of interest to the variable url.
•	Package the request to the URL, send the request and catch the response with a single function requests.get(), assigning the response to the variable r.
•	Use the text attribute of the object r to return the HTML of the webpage as a string; store the result in a variable html_doc.
•	Create a BeautifulSoup object soup from the resulting HTML using the function BeautifulSoup().
•	Use the method prettify() on soup and assign the result to pretty_soup.
•	Hit submit to print to prettified HTML to your shell!

Script.py
# Import packages
import requests
from bs4 import BeautifulSoup

# Specify url: url
url = 'https://www.python.org/~guido/'

# Package the request, send the request and catch the response: r
r = requests.get(url)

# Extracts the response as html: html_doc
html_doc = r.text

# Create a BeautifulSoup object from the HTML: soup
soup = BeautifulSoup(html_doc)

# Prettify the BeautifulSoup object: pretty_soup
pretty_soup = soup.prettify()

# Print the response
print(pretty_soup)

IPython Shell

<script.py> output:
    <html>
     <head>
      <title>
       Guido's Personal Home Page
      </title>
     </head>
     <body bgcolor="#FFFFFF" text="#000000">
      <h1>
       <a href="pics.html">
        <img border="0" src="images/IMG_2192.jpg"/>
       </a>
       Guido van Rossum - Personal Home Page
      </h1>
      <p>
       <a href="http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm">
        <i>
         "Gawky and proud of it."
        </i>
       </a>
       <h3>
        <a href="http://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg">
         Who
    I Am
        </a>
       </h3>
       <p>
        Read
    my
        <a href="http://neopythonic.blogspot.com/2016/04/kings-day-speech.html">
         "King's
    Day Speech"
        </a>
        for some inspiration.
        <p>
         I am the author of the
         <a href="http://www.python.org">
          Python
         </a>
         programming language.  See also my
         <a href="Resume.html">
          resume
         </a>
         and my
         <a href="Publications.html">
          publications list
         </a>
         , a
         <a href="bio.html">
          brief bio
         </a>
         , assorted
         <a href="http://legacy.python.org/doc/essays/">
          writings
         </a>
         ,
         <a href="http://legacy.python.org/doc/essays/ppt/">
          presentations
         </a>
         and
         <a href="interviews.html">
          interviews
         </a>
         (all about Python), some
         <a href="pics.html">
          pictures of me
         </a>
         ,
         <a href="http://neopythonic.blogspot.com">
          my new blog
         </a>
         , and
    my
         <a href="http://www.artima.com/weblogs/index.jsp?blogger=12088">
          old
    blog
         </a>
         on Artima.com.  I am
         <a href="https://twitter.com/gvanrossum">
          @gvanrossum
         </a>
         on Twitter.  I
    also have
    a
         <a href="https://plus.google.com/u/0/115212051037621986145/posts">
          G+
    profile
         </a>
         .
         <p>
          In January 2013 I joined
          <a href="http://www.dropbox.com">
           Dropbox
          </a>
          .  I work on various Dropbox
    products and have 50% for my Python work, no strings attached.
    Previously, I have worked for Google, Elemental Security, Zope
    Corporation, BeOpen.com, CNRI, CWI, and SARA.  (See
    my
          <a href="Resume.html">
           resume
          </a>
          .)  I created Python while at CWI.
          <h3>
           How to Reach Me
          </h3>
          <p>
           You can send email for me to guido (at) python.org.
    I read everything sent there, but if you ask
    me a question about using Python, it's likely that I won't have time
    to answer it, and will instead refer you to
    help (at) python.org,
           <a href="http://groups.google.com/groups?q=comp.lang.python">
            comp.lang.python
           </a>
           or
           <a href="http://stackoverflow.com">
            StackOverflow
           </a>
           .  If you need to
    talk to me on the phone or send me something by snail mail, send me an
    email and I'll gladly email you instructions on how to reach me.
           <h3>
            My Name
           </h3>
           <p>
            My name often poses difficulties for Americans.
            <p>
             <b>
              Pronunciation:
             </b>
             in Dutch, the "G" in Guido is a hard G,
    pronounced roughly like the "ch" in Scottish "loch".  (Listen to the
             <a href="guido.au">
              sound clip
             </a>
             .)  However, if you're
    American, you may also pronounce it as the Italian "Guido".  I'm not
    too worried about the associations with mob assassins that some people
    have. :-)
             <p>
              <b>
               Spelling:
              </b>
              my last name is two words, and I'd like to keep it
    that way, the spelling on some of my credit cards notwithstanding.
    Dutch spelling rules dictate that when used in combination with my
    first name, "van" is not capitalized: "Guido van Rossum".  But when my
    last name is used alone to refer to me, it is capitalized, for
    example: "As usual, Van Rossum was right."
              <p>
               <b>
                Alphabetization:
               </b>
               in America, I show up in the alphabet under
    "V".  But in Europe, I show up under "R".  And some of my friends put
    me under "G" in their address book...
               <h3>
                More Hyperlinks
               </h3>
               <ul>
                <li>
                 Here's a collection of
                 <a href="http://legacy.python.org/doc/essays/">
                  essays
                 </a>
                 relating to Python
    that I've written, including the foreword I wrote for Mark Lutz' book
    "Programming Python".
                 <p>
                  <li>
                   I own the official
                   <a href="images/license.jpg">
                    <img align="center" border="0" height="75" src="images/license_thumb.jpg" width="100">
                     Python license.
                    </img>
                   </a>
                   <p>
                   </p>
                  </li>
                 </p>
                </li>
               </ul>
               <h3>
                The Audio File Formats FAQ
               </h3>
               <p>
                I was the original creator and maintainer of the Audio File Formats
    FAQ.  It is now maintained by Chris Bagwell
    at
                <a href="http://www.cnpbagwell.com/audio-faq">
                 http://www.cnpbagwell.com/audio-faq
                </a>
                .  And here is a link to
                <a href="http://sox.sourceforge.net/">
                 SOX
                </a>
                , to which I contributed
    some early code.
               </p>
              </p>
             </p>
            </p>
           </p>
          </p>
         </p>
        </p>
       </p>
      </p>
     </body>
    </html>
    <hr>
     <a href="images/internetdog.gif">
      "On the Internet, nobody knows you're
    a dog."
     </a>
     <hr>
     </hr>
    </hr>





Turning a webpage into data using BeautifulSoup: getting the text
As promised, in the following exercises, you'll learn the basics of extracting information from HTML soup. In this exercise, you'll figure out how to extract the text from the BDFL's webpage, along with printing the webpage's title.
Instructions
•	In the sample code, the HTML response object html_doc has already been created: your first task is to Soupify it using the function BeautifulSoup()and to assign the resulting soup to the variable soup.
•	Extract the title from the HTML soup soup using the attribute titleand assign the result to guido_title.
•	Print the title of Guido's webpage to the shell using the print() function.
•	Extract the text from the HTML soup soup using the method get_text() and assign to guido_text.
•	Hit submit to print the text from Guido's webpage to the shell.

Script.py

# Import packages
import requests
from bs4 import BeautifulSoup

# Specify url: url
url = 'https://www.python.org/~guido/'

# Package the request, send the request and catch the response: r
r = requests.get(url)

# Extract the response as html: html_doc
html_doc = r.text

# Create a BeautifulSoup object from the HTML: soup
soup = BeautifulSoup(html_doc)

# Get the title of Guido's webpage: guido_title
guido_title = soup.title

# Print the title of Guido's webpage to the shell
print(guido_title)

# Get Guido's text: guido_text
guido_text=soup.get_text()

# Print Guido's text to the shell
print(guido_text)

IPython Shell

<script.py> output:
    <title>Guido's Personal Home Page</title>
    
    
    Guido's Personal Home Page
    
    
    
    
    Guido van Rossum - Personal Home Page
    "Gawky and proud of it."
    Who
    I Am
    Read
    my "King's
    Day Speech" for some inspiration.
    
    I am the author of the Python
    programming language.  See also my resume
    and my publications list, a brief bio, assorted writings, presentations and interviews (all about Python), some
    pictures of me,
    my new blog, and
    my old
    blog on Artima.com.  I am
    @gvanrossum on Twitter.  I
    also have
    a G+
    profile.
    
    In January 2013 I joined
    Dropbox.  I work on various Dropbox
    products and have 50% for my Python work, no strings attached.
    Previously, I have worked for Google, Elemental Security, Zope
    Corporation, BeOpen.com, CNRI, CWI, and SARA.  (See
    my resume.)  I created Python while at CWI.
    
    How to Reach Me
    You can send email for me to guido (at) python.org.
    I read everything sent there, but if you ask
    me a question about using Python, it's likely that I won't have time
    to answer it, and will instead refer you to
    help (at) python.org,
    comp.lang.python or
    StackOverflow.  If you need to
    talk to me on the phone or send me something by snail mail, send me an
    email and I'll gladly email you instructions on how to reach me.
    
    My Name
    My name often poses difficulties for Americans.
    
    Pronunciation: in Dutch, the "G" in Guido is a hard G,
    pronounced roughly like the "ch" in Scottish "loch".  (Listen to the
    sound clip.)  However, if you're
    American, you may also pronounce it as the Italian "Guido".  I'm not
    too worried about the associations with mob assassins that some people
    have. :-)
    
    Spelling: my last name is two words, and I'd like to keep it
    that way, the spelling on some of my credit cards notwithstanding.
    Dutch spelling rules dictate that when used in combination with my
    first name, "van" is not capitalized: "Guido van Rossum".  But when my
    last name is used alone to refer to me, it is capitalized, for
    example: "As usual, Van Rossum was right."
    
    Alphabetization: in America, I show up in the alphabet under
    "V".  But in Europe, I show up under "R".  And some of my friends put
    me under "G" in their address book...
    
    
    More Hyperlinks
    
    Here's a collection of essays relating to Python
    that I've written, including the foreword I wrote for Mark Lutz' book
    "Programming Python".
    I own the official 
    Python license.
    
    The Audio File Formats FAQ
    I was the original creator and maintainer of the Audio File Formats
    FAQ.  It is now maintained by Chris Bagwell
    at http://www.cnpbagwell.com/audio-faq.  And here is a link to
    SOX, to which I contributed
    some early code.
    
    
    
    "On the Internet, nobody knows you're
    a dog."

Turning a webpage into data using BeautifulSoup: getting the hyperlinks
In this exercise, you'll figure out how to extract the URLs of the hyperlinks from the BDFL's webpage. In the process, you'll become close friends with the soup method find_all().
Instructions
•	Use the method find_all() to find all hyperlinks in soup, remembering that hyperlinks are defined by the HTML tag <a> but passed to find_all() without angle brackets; store the result in the variable a_tags.
•	The variable a_tags is a results set: your job now is to enumerate over it, using a for loop and to print the actual URLs of the hyperlinks; to do this, for every element link in a_tags, you want to print() link.get('href').

Script.py

# Import packages
import requests
from bs4 import BeautifulSoup

# Specify url
url = 'https://www.python.org/~guido/'

# Package the request, send the request and catch the response: r
r = requests.get(url)

# Extracts the response as html: html_doc
html_doc = r.text

# create a BeautifulSoup object from the HTML: soup
soup = BeautifulSoup(html_doc)

# Print the title of Guido's webpage
print(soup.title)

# Find all 'a' tags (which define hyperlinks): a_tags
a_tags = soup.find_all('a')

# Print the URLs to the shell
for link in a_tags:
    print(link.get('href'))

IPython Shell

<script.py> output:
    <title>Guido's Personal Home Page</title>
    pics.html
    http://www.washingtonpost.com/wp-srv/business/longterm/microsoft/stories/1998/raymond120398.htm
    http://metalab.unc.edu/Dave/Dr-Fun/df200004/df20000406.jpg
    http://neopythonic.blogspot.com/2016/04/kings-day-speech.html
    http://www.python.org
    Resume.html
    Publications.html
    bio.html
    http://legacy.python.org/doc/essays/
    http://legacy.python.org/doc/essays/ppt/
    interviews.html
    pics.html
    http://neopythonic.blogspot.com
    http://www.artima.com/weblogs/index.jsp?blogger=12088
    https://twitter.com/gvanrossum
    https://plus.google.com/u/0/115212051037621986145/posts
    http://www.dropbox.com
    Resume.html
    http://groups.google.com/groups?q=comp.lang.python
    http://stackoverflow.com
    guido.au
    http://legacy.python.org/doc/essays/
    images/license.jpg
    http://www.cnpbagwell.com/audio-faq
    http://sox.sourceforge.net/
    images/internetdog.gif


Loading and exploring a JSON
Now that you know what a JSON is, you'll load one into your Python environment and explore it yourself. Here, you'll load the JSON 'a_movie.json' into the variable json_data, which will be a dictionary. You'll then explore the JSON contents by printing the key-value pairs of json_data to the shell.
Instructions
•	Load the JSON 'a_movie.json' into the variable json_data within the context provided by the with statement. To do so, use the function json.load() within the context manager.
•	Use a for loop to print all key-value pairs in the dictionary json_data. Recall that you can access a value in a dictionary using the syntax: dictionary[key].


Script.py

# Load JSON: json_data
with open("a_movie.json") as json_file:
    json_data = json.load(json_file)

# Print each key-value pair in json_data
for k in json_data.keys():
    print(k + ': ', json_data[k])





IPython Shell

Title:  The Social Network
Year:  2010
Rated:  PG-13
Released:  01 Oct 2010
Runtime:  120 min
Genre:  Biography, Drama
Director:  David Fincher
Writer:  Aaron Sorkin (screenplay), Ben Mezrich (book)
Actors:  Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons
Plot:  Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.
Language:  English, French
Country:  USA
Awards:  Won 3 Oscars. Another 165 wins & 168 nominations.
Poster:  https://m.media-amazon.com/images/M/MV5BOGUyZDUxZjEtMmIzMC00MzlmLTg4MGItZWJmMzBhZjE0Mjc1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_SX300.jpg
Ratings:  [{'Source': 'Internet Movie Database', 'Value': '7.7/10'}, {'Source': 'Rotten Tomatoes', 'Value': '95%'}, {'Source': 'Metacritic', 'Value': '95/100'}]
Metascore:  95
imdbRating:  7.7
imdbVotes:  562,197
imdbID:  tt1285016
Type:  movie
DVD:  11 Jan 2011
BoxOffice:  $96,400,000
Production:  Columbia Pictures
Website:  http://www.thesocialnetwork-movie.com/
Response:  True

Pop quiz: Exploring your JSON
Load the JSON 'a_movie.json' into a variable, which will be a dictionary. Do so by copying, pasting and executing the following code in the IPython Shell:
import json
with open("a_movie.json") as json_file:
    json_data = json.load(json_file)
Print the values corresponding to the keys 'Title' and 'Year' and answer the following question about the movie that the JSON describes:
Which of the following statements is true of the movie in question?


Possible Answers
•	 
The title is 'Kung Fu Panda' and the year is 2010.
•	 
The title is 'Kung Fu Panda' and the year is 2008.
•	 
The title is 'The Social Network' and the year is 2010.
•	 
The title is 'The Social Network' and the year is 2008.
API requests
Now it's your turn to pull some movie data down from the Open Movie Database (OMDB) using their API. The movie you'll query the API about is The Social Network. Recall that, in the video, to query the API about the movie Hackers, Hugo's query string was 'http://www.omdbapi.com/?t=hackers'and had a single argument t=hackers.
Note: recently, OMDB has changed their API: you now also have to specify an API key. This means you'll have to add another argument to the URL: apikey=72bc447a.
Instructions
•	Import the requests package.
•	Assign to the variable url the URL of interest in order to query 'http://www.omdbapi.com' for the data corresponding to the movie The Social Network. The query string should have two arguments: apikey=72bc447a and t=the+social+network. You can combine them as follows: apikey=72bc447a&t=the+social+network.
•	Print the text of the reponse object r by using its text attribute and passing the result to the print() function.


Script.py

# Import requests package
import requests

# Assign URL to variable: url
url = 'http://www.omdbapi.com/?apikey=72bc447a&t=the+social+network' 

# Package the request, send the request and catch the response: r
r = requests.get(url)


# Print the text of the response
print(r.text)


IPython Shell

<script.py> output:
    {"Title":"The Social Network","Year":"2010","Rated":"PG-13","Released":"01 Oct 2010","Runtime":"120 min","Genre":"Biography, Drama","Director":"David Fincher","Writer":"Aaron Sorkin (screenplay), Ben Mezrich (book)","Actors":"Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons","Plot":"Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.","Language":"English, French","Country":"USA","Awards":"Won 3 Oscars. Another 165 wins & 168 nominations.","Poster":"https://m.media-amazon.com/images/M/MV5BOGUyZDUxZjEtMmIzMC00MzlmLTg4MGItZWJmMzBhZjE0Mjc1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_SX300.jpg","Ratings":[{"Source":"Internet Movie Database","Value":"7.7/10"},{"Source":"Rotten Tomatoes","Value":"95%"},{"Source":"Metacritic","Value":"95/100"}],"Metascore":"95","imdbRating":"7.7","imdbVotes":"562,197","imdbID":"tt1285016","Type":"movie","DVD":"11 Jan 2011","BoxOffice":"$96,400,000","Production":"Columbia Pictures","Website":"http://www.thesocialnetwork-movie.com/","Response":"True"}


JSON–from the web to Python
Wow, congrats! You've just queried your first API programmatically in Python and printed the text of the response to the shell. However, as you know, your response is actually a JSON, so you can do one step better and decode the JSON. You can then print the key-value pairs of the resulting dictionary. That's what you're going to do now!
Instructions
•	Pass the variable url to the requests.get() function in order to send the relevant request and catch the response, assigning the resultant response message to the variable r.
•	Apply the json() method to the response object r and store the resulting dictionary in the variable json_data.
•	Hit Submit Answer to print the key-value pairs of the dictionary json_data to the shell.


Script.py
# Import package
import requests

# Assign URL to variable: url
url = 'http://www.omdbapi.com/?apikey=72bc447a&t=social+network'

# Package the request, send the request and catch the response: r
r = requests.get(url)

# Decode the JSON data into a dictionary: json_data
json_data = r.json()

# Print each key-value pair in json_data
for k in json_data.keys():
    print(k + ': ', json_data[k])

IPython Shell

<script.py> output:
    Title:  The Social Network
    Year:  2010
    Rated:  PG-13
    Released:  01 Oct 2010
    Runtime:  120 min
    Genre:  Biography, Drama
    Director:  David Fincher
    Writer:  Aaron Sorkin (screenplay), Ben Mezrich (book)
    Actors:  Jesse Eisenberg, Rooney Mara, Bryan Barter, Dustin Fitzsimons
    Plot:  Harvard student Mark Zuckerberg creates the social networking site that would become known as Facebook, but is later sued by two brothers who claimed he stole their idea, and the co-founder who was later squeezed out of the business.
    Language:  English, French
    Country:  USA
    Awards:  Won 3 Oscars. Another 165 wins & 168 nominations.
    Poster:  https://m.media-amazon.com/images/M/MV5BOGUyZDUxZjEtMmIzMC00MzlmLTg4MGItZWJmMzBhZjE0Mjc1XkEyXkFqcGdeQXVyMTMxODk2OTU@._V1_SX300.jpg
    Ratings:  [{'Source': 'Internet Movie Database', 'Value': '7.7/10'}, {'Source': 'Rotten Tomatoes', 'Value': '95%'}, {'Source': 'Metacritic', 'Value': '95/100'}]
    Metascore:  95
    imdbRating:  7.7
    imdbVotes:  562,197
    imdbID:  tt1285016
    Type:  movie
    DVD:  11 Jan 2011
    BoxOffice:  $96,400,000
    Production:  Columbia Pictures
    Website:  http://www.thesocialnetwork-movie.com/
    Response:  True



Checking out the Wikipedia API
You're doing so well and having so much fun that we're going to throw one more API at you: the Wikipedia API (documented here). You'll figure out how to find and extract information from the Wikipedia page for Pizza. What gets a bit wild here is that your query will return nested JSONs, that is, JSONs with JSONs, but Python can handle that because it will translate them into dictionaries within dictionaries.
The URL that requests the relevant query from the Wikipedia API is
https://en.wikipedia.org/w/api.php?action=query&prop=extracts&format=json&exintro=&titles=pizza
Instructions
•	Assign the relevant URL to the variable url.
•	Apply the json() method to the response object r and store the resulting dictionary in the variable json_data.
•	The variable pizza_extract holds the HTML of an extract from Wikipedia's Pizza page as a string; use the function print() to print this string to the shell.
Script.py

# Import package
import requests

# Assign URL to variable: url
url = 'https://en.wikipedia.org/w/api.php?action=query&prop=extracts&format=json&exintro=&titles=pizza'

# Package the request, send the request and catch the response: r
r = requests.get(url)

# Decode the JSON data into a dictionary: json_data
json_data = r.json()

# Print the Wikipedia page extract
pizza_extract = json_data['query']['pages']['24768']['extract']
print(pizza_extract)


IPython Shell


<p class="mw-empty-elt">
</p>

<p><b>Pizza</b> (<small>Italian: </small><span title="Representation in the International Phonetic Alphabet (IPA)">[ˈpittsa]</span>, <small>Neapolitan: </small><span title="Representation in the International Phonetic Alphabet (IPA)">[ˈpittsə]</span>) is a savory dish of Italian origin, consisting of a usually round, flattened base of leavened wheat-based dough topped with tomatoes, cheese, and various other ingredients (anchovies, olives, meat, etc.) baked at a high temperature, traditionally in a  wood-fired oven. In formal settings, like a restaurant, pizza is  eaten with knife and fork, but in casual settings it is cut into wedges to be eaten while held in the hand. Small pizzas are sometimes called pizzettas.
</p><p>The term <i>pizza</i> was first recorded in the 10th century in a Latin manuscript from the Southern Italian town of Gaeta in Lazio, on the border with Campania. Modern pizza was invented in Naples, and the dish and its variants have since become popular in many countries. It has become one of the most popular foods in the world and a common fast food item in Europe and North America, available at  pizzerias (restaurants specializing in pizza),  restaurants offering Mediterranean cuisine, and via pizza delivery. Many companies sell ready-baked frozen pizzas to be reheated in an ordinary home oven.
</p><p>The <i>Associazione Verace Pizza Napoletana</i> (lit. True Neapolitan Pizza Association) is  a non-profit organization founded in 1984 with headquarters in Naples that aims to promote traditional Neapolitan pizza. In 2009, upon Italy's request, Neapolitan pizza was registered with the European Union as a Traditional Speciality Guaranteed dish, and in 2017 the art of its making was included on UNESCO's list of intangible cultural heritage.</p>


API Authentication
The package tweepy is great at handling all the Twitter API OAuth Authentication details for you. All you need to do is pass it your authentication credentials. In this interactive exercise, we have created some mock authentication credentials (if you wanted to replicate this at home, you would need to create a Twitter App as Hugo detailed in the video). Your task is to pass these credentials to tweepy's OAuth handler.
Instructions
•	Import the package tweepy.
•	Pass the parameters consumer_key and consumer_secret to the function tweepy.OAuthHandler().
•	Complete the passing of OAuth credentials to the OAuth handler auth by applying to it the method set_access_token(), along with arguments access_token and access_token_secret.


Script.py

# Import package
import tweepy

# Store OAuth authentication credentials in relevant variables
access_token = "1092294848-aHN7DcRP9B4VMTQIhwqOYiB14YkW92fFO8k8EPy"
access_token_secret = "X4dHmhPfaksHcQ7SCbmZa2oYBBVSD2g8uIHXsp5CTaksx"
consumer_key = "nZ6EA0FxZ293SxGNg8g8aP0HM"
consumer_secret = "fJGEodwe3KiKUnsYJC3VRndj7jevVvXbK2D5EiJ2nehafRgA6i"

# Pass OAuth details to tweepy's OAuth handler
auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
auth.set_access_token(access_token, access_token_secret)

IPython Shell

In [2]: # Import package
        import tweepy
        
        # Store OAuth authentication credentials in relevant variables
        access_token = "1092294848-aHN7DcRP9B4VMTQIhwqOYiB14YkW92fFO8k8EPy"
        access_token_secret = "X4dHmhPfaksHcQ7SCbmZa2oYBBVSD2g8uIHXsp5CTaksx"
        consumer_key = "nZ6EA0FxZ293SxGNg8g8aP0HM"
        consumer_secret = "fJGEodwe3KiKUnsYJC3VRndj7jevVvXbK2D5EiJ2nehafRgA6i"
        
        # Pass OAuth details to tweepy's OAuth handler
        auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
        auth.set_access_token(access_token, access_token_secret)

Streaming tweets
Now that you have set up your authentication credentials, it is time to stream some tweets! We have already defined the tweet stream listener class, MyStreamListener, just as Hugo did in the introductory video. You can find the code for the tweet stream listener class here.
Your task is to create the Streamobject and to filter tweets according to particular keywords.
Instructions
•	Create your Stream object with authentication by passing tweepy.Stream() the authentication handler auth and the Stream listener l;
•	To filter Twitter streams, pass to the track argument in stream.filter() a list containing the desired keywords 'clinton', 'trump', 'sanders', and 'cruz'.



Script.py

IPython Shell



Script.py

IPython Shell



Script.py

IPython Shell


