Python lists, what are they?

Learn to store, access and manipulate data in lists: the first step towards efficiently working with huge amounts of data.

Lists, what are they?
1.	Create a list
As opposed to int, bool etc., a list is a compound data type; you can group values together:
a = "is"
b = "nice"
my_list = ["my", "list", a, b]
After measuring the height of your family, you decide to collect some information on the house you're living in. The areas of the different parts of your house are stored in separate variables for now, as shown in the script.
Instruction 
•	Create a list, areas, that contains the area of the hallway (hall), kitchen (kit), living room (liv), bedroom (bed) and bathroom (bath), in this order. Use the predefined variables.
•	Print areas with the print() function.
Answer / Script.py 

# area variables (in square meters)
hall = 11.25
kit = 18.0
liv = 20.0
bed = 10.75
bath = 9.50

# Create list areas
areas =[hall,kit,liv,bed,bath]

# Print areas
print(areas)

2.	Create list with different types
A list can contain any Python type. Although it's not really common, a list can also contain a mix of Python types including strings, floats, booleans, etc.
The printout of the previous exercise wasn't really satisfying. It's just a list of numbers representing the areas, but you can't tell which area corresponds to which part of your house.
The code on the right is the start of a solution. For some of the areas, the name of the corresponding room is already placed in front. Pay attention here! "bathroom" is a string, while bath is a variable that represents the float 9.50 you specified earlier.
Instruction 
•	Finish the line of code that creates the areas list. Build the list so that the list first contains the name of each room as a string and then its area. In other words, add the strings "hallway", "kitchen" and "bedroom" at the appropriate locations.
•	Print areas again; is the printout more informative this time?
Answer / Script.py 

# area variables (in square meters)
hall = 11.25
kit = 18.0
liv = 20.0
bed = 10.75
bath = 9.50

# Adapt list areas
areas = ["hallway",hall,"kitchen",kit, "living room", liv, "bedroom", bed, "bathroom", bath]

# Print areas
print(areas)

3.	Select the valid list
A list can contain any Python type. But a list itself is also a Python type. That means that a list can also contain a list! Python is getting funkier by the minute, but fear not, just remember the list syntax:
my_list = [el1, el2, el3]
Can you tell which ones of the following lines of Python code are valid ways to build a list?
A. [1, 3, 4, 2] B. [[1, 2, 3], [4, 5, 7]] C. [1 + 2, "a" * 5, 3]
Instruction 
Possible Answers
 
A, B and C
 
B
 
B and C
 
C

Possible Answers

A, B and C

4.	List of lists
As a data scientist, you'll often be dealing with a lot of data, and it will make sense to group some of this data.
Instead of creating a flat list containing strings and floats, representing the names and areas of the rooms in your house, you can create a list of lists. The script on the right can already give you an idea.
Don't get confused here: "hallway" is a string, while hall is a variable that represents the float 11.25 you specified earlier.
Instruction 
•	Finish the list of lists so that it also contains the bedroom and bathroom data. Make sure you enter these in order!
•	Print out house; does this way of structuring your data make more sense?
•	Print out the type of house. Are you still dealing with a list?
Answer / Script.py 

# area variables (in square meters)
hall = 11.25
kit = 18.0
liv = 20.0
bed = 10.75
bath = 9.50

# house information as list of lists
house = [["hallway", hall],
         ["kitchen", kit],
         ["living room", liv], 
         ["bedroom", bed],
         ["bathroom", bath]] 
         
# Print out house
print(house)

# Print out the type of house
print(type(house))

Exercise
List Manipulation
5.	Replace list elements
Replacing list elements is pretty easy. Simply subset the list and assign new values to the subset. You can select single elements or you can change entire list slices at once.
Use the IPython Shell to experiment with the commands below. Can you tell what's happening and why?
x = ["a", "b", "c", "d"]
x[1] = "r"
x[2:] = ["s", "t"]
For this and the following exercises, you'll continue working on the areaslist that contains the names and areas of different rooms in a house.
Instruction

Update the area of the bathroom area to be 10.50 square meters instead of 9.50.
•	Make the areas list more trendy! Change "living room" to "chill zone"
Script.py 

# Create the areas list
areas = ["hallway", 11.25, "kitchen", 18.0, "living room", 20.0, "bedroom", 10.75, "bathroom", 9.50]

# Correct the bathroom area
areas [9]=10.50

# Change "living room" to "chill zone"
areas [4]= "chill zone"

6.	Extend a list
If you can change elements in a list, you sure want to be able to add elements to it, right? ou can use the + operator:
x = ["a", "b", "c", "d"]
y = x + ["e", "f"]
You just won the lottery, awesome! You decide to build a poolhouse and a garage. Can you add the information to the areas list?

•	Use the + operator to paste the list ["poolhouse", 24.5] to the end of the areas list. Store the resulting list as areas_1.
•	Further extend areas_1 by adding data on your garage. Add the string "garage" and float 15.45. Name the resulting list areas_2
Script.py 


# Create the areas list and make some changes
areas = ["hallway", 11.25, "kitchen", 18.0, "chill zone", 20.0,
         "bedroom", 10.75, "bathroom", 10.50]

# Add poolhouse data to areas, new list is areas_1
areas_1= ["hallway", 11.25, "kitchen", 18.0, "chill zone", 20.0,
         "bedroom", 10.75, "bathroom", 10.50] + ["poolhouse", 24.5]

# Add garage data to areas_1, new list is areas_2
areas_2 = ["hallway", 11.25, "kitchen", 18.0, "chill zone", 20.0,
         "bedroom", 10.75, "bathroom", 10.50] + ["poolhouse", 24.5, "garage", 15.45]

7.	Delete list elements
Finally, you can also remove elements from your list. You can do this with the del statement:
x = ["a", "b", "c", "d"]
del(x[1])
Pay attention here: as soon as you remove an element from a list, the indexes of the elements that come after the deleted element all change!
The updated and extended version of areas that you've built in the previous exercises is coded below. You can copy and paste this into the IPython Shell to play around with the result.
areas = ["hallway", 11.25, "kitchen", 18.0,
        "chill zone", 20.0, "bedroom", 10.75,
         "bathroom", 10.50, "poolhouse", 24.5,
         "garage", 15.45]
There was a mistake! The amount you won with the lottery is not that big after all and it looks like the poolhouse isn't going to happen. You decide to remove the corresponding string and float from the areas list.
The ; sign is used to place commands on the same line. The following two code chunks are equivalent:


# Same line
command1; command2

# Separate lines
command1
command2
Which of the code chunks will do the job for us?
Possible Answers
 
del(areas[10]); del(areas[11])
 
del(areas[10:11])
 
del(areas[-4:-2])
 
del(areas[-3]); del(areas[-4])

8.	Inner workings of lists
At the end of the video, Filip explained how Python lists work behind the scenes. In this exercise you'll get some hands-on experience with this.
The Python code in the script already creates a list with the name areas and a copy named areas_copy. Next, the first element in the areas_copy list is changed and the areas list is printed out. If you hit Run Code you'll see that, although you've changed areas_copy, the change also takes effect in the areas list. That's because areas and areas_copy point to the same list.
If you want to prevent changes in areas_copy from also taking effect in areas, you'll have to do a more explicit copy of the areas list. You can do this with list() or by using [:]
Instruction
Change the second command, that creates the variable areas_copy, such that areas_copy is an explicit copy of areas. 
After your edit, changes made to areas_copy shouldn't affect areas. Hit Submit Answer to check this.
Script.py 
# Create list areas
areas = [11.25, 18.0, 20.0, 10.75, 9.50]

# Create areas_copy
areas_copy = list(areas) 

# Change areas_copy
areas_copy[0] = 5.0

# Print areas
print(areas)


