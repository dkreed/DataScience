Exploring your working directory
In order to import data into Python, you should first have an idea of what files are in your working directory.
IPython, which is running on DataCamp's servers, has a bunch of cool commands, including its magic commands. For example, starting a line with ! gives you complete system shell access. This means that the IPython magic command ! ls will display the contents of your current directory. Your task is to use the IPython magic command ! ls to check out the contents of your current directory and answer the following question: which of the following files is in your working directory?
Instructions
Possible Answers
•	 
huck_finn.txt
•	 
titanic.csv
•	 
moby_dick.txt

IPythonshell 

! ls 
moby_dick.txt 

Importing entire text files
In this exercise, you'll be working with the file moby_dick.txt. It is a text file that contains the opening sentences of Moby Dick, one of the great American novels! Here you'll get experience opening a text file, printing its contents to the shell and, finally, closing it.
Instructions
•	Open the file moby_dick.txt as read-only and store it in the variable file. Make sure to pass the filename enclosed in quotation marks ''.
•	Print the contents of the file to the shell using the print() function. As Hugo showed in the video, you'll need to apply the method read() to the object file.
•	Check whether the file is closed by executing print(file.closed).
•	Close the file using the close() method.
•	Check again that the file is closed as you did above.
IPythonshell 

! ls 
moby_dick.txt 
Scrip.py

# Open a file: file
file = open('moby_dick.txt', mode='r')

# Print it
print(file.read())

# Check whether file is closed
print(file.closed)

# Close file
file.close()

# Check whether file is closed
print(file.closed)

<script.py> output:
    CHAPTER 1. Loomings.
    
    Call me Ishmael. Some years ago--never mind how long precisely--having
    little or no money in my purse, and nothing particular to interest me on
    shore, I thought I would sail about a little and see the watery part of
    the world. It is a way I have of driving off the spleen and regulating
    the circulation. Whenever I find myself growing grim about the mouth;
    whenever it is a damp, drizzly November in my soul; whenever I find
    myself involuntarily pausing before coffin warehouses, and bringing up
    the rear of every funeral I meet; and especially whenever my hypos get
    such an upper hand of me, that it requires a strong moral principle to
    prevent me from deliberately stepping into the street, and methodically
    knocking people's hats off--then, I account it high time to get to sea
    as soon as I can. This is my substitute for pistol and ball. With a
    philosophical flourish Cato throws himself upon his sword; I quietly
    take to the ship. There is nothing surprising in this. If they but knew
    it, almost all men in their degree, some time or other, cherish very
    nearly the same feelings towards the ocean with me.
    False

Importing text files line by line
For large files, we may not want to print all of their content to the shell: you may wish to print only the first few lines. Enter the readline() method, which allows you to do this. When a file called file is open, you can print out the first line by executing file.readline(). If you execute the same command again, the second line will print, and so on.
In the introductory video, Hugo also introduced the concept of a context manager. He showed that you can bind a variable file by using a context manager construct:
with open('huck_finn.txt') as file:
While still within this construct, the variable file will be bound to open('huck_finn.txt'); thus, to print the file to the shell, all the code you need to execute is:
with open('huck_finn.txt') as file:
    print(file.readline())
You'll now use these tools to print the first few lines of moby_dick.txt!

Instructions
•	Open moby_dick.txt using the with context manager and the variable file.
•	Print the first three lines of the file to the shell by using readline() three times within the context manager.

IPythonshell 

# Read & print the first 3 lines
with open('moby_dick.txt') as file:
    print(file.readline())
    print(file.readline())
    print(file.readline())
Scrip.py
<script.py> output:
    CHAPTER 1. Loomings  
    
    
    Call me Ishmael. Some years ago--never mind how long precisely--having

Pop quiz: examples of flat files
You're now well-versed in importing text files and you're about to become a wiz at importing flat files. But can you remember exactly what a flat file is? Test your knowledge by answering the following question: which of these file types below is NOT an example of a flat file?
Answer the question
Possible Answers
•	 
A .csv file.
•	 
A tab-delimited .txt.
•	 
A relational database (e.g. PostgreSQL).

Pop quiz: what exactly are flat files?
Which of the following statements about flat files is incorrect?
Answer the question
Possible Answers
•	 
Flat files consist of rows and each row is called a record.
•	 
Flat files consist of multiple tables with structured relationships between the tables.
•	 
A record in a flat file is composed of fields or attributes, each of which contains at most one item of information.
•	 
Flat files are pervasive in data science.
Why we like flat files and the Zen of Python
In PythonLand, there are currently hundreds of Python Enhancement Proposals, commonly referred to as PEPs. PEP8, for example, is a standard style guide for Python, written by our sensei Guido van Rossum himself. It is the basis for how we here at DataCamp ask our instructors to style their code. Another one of my favorites is PEP20, commonly called the Zen of Python. Its abstract is as follows:
Long time Pythoneer Tim Peters succinctly channels the BDFL's guiding principles for Python's design into 20 aphorisms, only 19 of which have been written down.
If you don't know what the acronym BDFL stands for, I suggest that you look here. You can print the Zen of Python in your shell by typing import this into it! You're going to do this now and the 5th aphorism (line) will say something of particular interest.
The question you need to answer is: what is the 5th aphorism of the Zen of Python?
Instructions
Possible Answers
•	 
Flat is better than nested.
•	 
Flat files are essential for data science.
•	 
The world is representable as a flat file.
•	 
Flatness is in the eye of the beholder.



IPythonshell

In [1]: import this


The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!



Using NumPy to import flat files
In this exercise, you're now going to load the MNIST digit recognition dataset using the numpy function loadtxt() and see just how easy it can be:
•	The first argument will be the filename.
•	The second will be the delimiter which, in this case, is a comma.
You can find more information about the MNIST dataset here on the webpage of Yann LeCun, who is currently Director of AI Research at Facebook and Founding Director of the NYU Center for Data Science, among many other things.
Instructions
•	Fill in the arguments of np.loadtxt() by passing file and a comma ',' for the delimiter.
•	Fill in the argument of print() to print the type of the object digits. Use the function type().
•	Execute the rest of the code to visualize one of the rows of the data.
Script.py

# Load file as array: digits
digits = np.loadtxt((file), delimiter=',')

# Print datatype of digits
print(type(digits))

# Select and reshape a row
im = digits[21, 1:]
im_sq = np.reshape(im, (28, 28))

# Plot reshaped data (matplotlib.pyplot already loaded as plt)
plt.imshow(im_sq, cmap='Greys', interpolation='nearest')
plt.show()

IPythonshell

In [2]: # Import package
        import numpy as np
        
        # Assign filename to variable: file
        file = 'digits.csv'
        
        # Load file as array: digits
        digits = np.loadtxt((file), delimiter=',')
        
        # Print datatype of digits
        print(type(digits))
        
        # Select and reshape a row
        im = digits[21, 1:]
        im_sq = np.reshape(im, (28, 28))
        
        # Plot reshaped data (matplotlib.pyplot already loaded as plt)
        plt.imshow(im_sq, cmap='Greys', interpolation='nearest')
        plt.show()
ERROR! Session/line number was not unique in database. History logging moved to new session 49
<class 'numpy.ndarray'>

<script.py> output:
    <class 'numpy.ndarray'>


Customizing your NumPy import
What if there are rows, such as a header, that you don't want to import? What if your file has a delimiter other than a comma? What if you only wish to import particular columns?
There are a number of arguments that np.loadtxt() takes that you'll find useful: delimiter changes the delimiter that loadtxt() is expecting, for example, you can use ',' and '\t' for comma-delimited and tab-delimited respectively; skiprows allows you to specify how many rows (not indices) you wish to skip; usecols takes a list of the indices of the columns you wish to keep.
The file that you'll be importing, digits_header.txt,
•	has a header
•	is tab-delimited.
Instructions
•	Complete the arguments of np.loadtxt(): the file you're importing is tab-delimited, you want to skip the first row and you only want to import the first and third columns.
•	Complete the argument of the print() call in order to print the entire array that you just imported.
Script.py

# Import numpy
import numpy as np

# Assign the filename: file
file = 'digits_header.txt'

# Load the data: data
data = np.loadtxt('digits_header.txt', delimiter='\t', skiprows=1, usecols=[0, 2])

# Print data
print(data)

IPythonshell

In [3]: # Import numpy
        import numpy as np
        
        # Assign the filename: file
        file = 'digits_header.txt'
        
        # Load the data: data
        data = np.loadtxt('digits_header.txt', delimiter='\t', skiprows=1, usecols=[0, 2])
        
        # Print data
        print(data)
[[1. 0.]
 [0. 0.]
 [1. 0.]
 [4. 0.]
 [0. 0.]
 [0. 0.]
 [7. 0.]
 [3. 0.]
 [5. 0.]
 [3. 0.]
 [8. 0.]
 [9. 0.]
 [1. 0.]
 [3. 0.]
 [3. 0.]
 [1. 0.]
 [2. 0.]
 [0. 0.]
 [7. 0.]
 [5. 0.]
 [8. 0.]
 [6. 0.]
 [2. 0.]
 [0. 0.]
 [2. 0.]
 [3. 0.]
 [6. 0.]
 [9. 0.]
 [9. 0.]
 [7. 0.]
 [8. 0.]
 [9. 0.]
 [4. 0.]
 [9. 0.]
 [2. 0.]
 [1. 0.]
 [3. 0.]
 [1. 0.]
 [1. 0.]
 [4. 0.]
 [9. 0.]
 [1. 0.]
 [4. 0.]
 [4. 0.]
 [2. 0.]
 [6. 0.]
 [3. 0.]
 [7. 0.]
 [7. 0.]
 [4. 0.]
 [7. 0.]
 [5. 0.]
 [1. 0.]
 [9. 0.]
 [0. 0.]
 [2. 0.]
 [2. 0.]
 [3. 0.]
 [9. 0.]
 [1. 0.]
 [1. 0.]
 [1. 0.]
 [5. 0.]
 [0. 0.]
 [6. 0.]
 [3. 0.]
 [4. 0.]
 [8. 0.]
 [1. 0.]
 [0. 0.]
 [3. 0.]
 [9. 0.]
 [6. 0.]
 [2. 0.]
 [6. 0.]
 [4. 0.]
 [7. 0.]
 [1. 0.]
 [4. 0.]
 [1. 0.]
 [5. 0.]
 [4. 0.]
 [8. 0.]
 [9. 0.]
 [2. 0.]
 [9. 0.]
 [9. 0.]
 [8. 0.]
 [9. 0.]
 [6. 0.]
 [3. 0.]
 [6. 0.]
 [4. 0.]
 [6. 0.]
 [2. 0.]
 [9. 0.]
 [1. 0.]
 [2. 0.]
 [0. 0.]
 [5. 0.]]

<script.py> output:
    [[1. 0.]
     [0. 0.]
     [1. 0.]
     [4. 0.]
     [0. 0.]
     [0. 0.]
     [7. 0.]
     [3. 0.]
     [5. 0.]
     [3. 0.]
     [8. 0.]
     [9. 0.]
     [1. 0.]
     [3. 0.]
     [3. 0.]
     [1. 0.]
     [2. 0.]
     [0. 0.]
     [7. 0.]
     [5. 0.]
     [8. 0.]
     [6. 0.]
     [2. 0.]
     [0. 0.]
     [2. 0.]
     [3. 0.]
     [6. 0.]
     [9. 0.]
     [9. 0.]
     [7. 0.]
     [8. 0.]
     [9. 0.]
     [4. 0.]
     [9. 0.]
     [2. 0.]
     [1. 0.]
     [3. 0.]
     [1. 0.]
     [1. 0.]
     [4. 0.]
     [9. 0.]
     [1. 0.]
     [4. 0.]
     [4. 0.]
     [2. 0.]
     [6. 0.]
     [3. 0.]
     [7. 0.]
     [7. 0.]
     [4. 0.]
     [7. 0.]
     [5. 0.]
     [1. 0.]
     [9. 0.]
     [0. 0.]
     [2. 0.]
     [2. 0.]
     [3. 0.]
     [9. 0.]
     [1. 0.]
     [1. 0.]
     [1. 0.]
     [5. 0.]
     [0. 0.]
     [6. 0.]
     [3. 0.]
     [4. 0.]
     [8. 0.]
     [1. 0.]
     [0. 0.]
     [3. 0.]
     [9. 0.]
     [6. 0.]
     [2. 0.]
     [6. 0.]
     [4. 0.]
     [7. 0.]
     [1. 0.]
     [4. 0.]
     [1. 0.]
     [5. 0.]
     [4. 0.]
     [8. 0.]
     [9. 0.]
     [2. 0.]
     [9. 0.]
     [9. 0.]
     [8. 0.]
     [9. 0.]
     [6. 0.]
     [3. 0.]
     [6. 0.]
     [4. 0.]
     [6. 0.]
     [2. 0.]
     [9. 0.]
     [1. 0.]
     [2. 0.]
     [0. 0.]
     [5. 0.]]



Importing different datatypes
The file seaslug.txt
•	has a text header, consisting of strings
•	is tab-delimited.
These data consists of percentage of sea slug larvae that had metamorphosed in a given time period. Read more here.
Due to the header, if you tried to import it as-is using np.loadtxt(), Python would throw you a ValueError and tell you that it could not convert string to float. There are two ways to deal with this: firstly, you can set the data type argument dtype equal to str (for string).
Alternatively, you can skip the first row as we have seen before, using the skiprows argument.
Instructions
•	Complete the first call to np.loadtxt() by passing file as the first argument.
•	Execute print(data[0]) to print the first element of data.
•	Complete the second call to np.loadtxt(). The file you're importing is tab-delimited, the datatype is float, and you want to skip the first row.
•	Print the 10th element of data_float by completing the print()command. Be guided by the previous print() call.
•	Execute the rest of the code to visualize the data.


Script.Py

# Assign filename: file
file = 'seaslug.txt'

# Import file: data
data = np.loadtxt(file, delimiter='\t', dtype=str)

# Print the first element of data
print(data[0])

# Import data as floats and skip the first row: data_float
data_float = np.loadtxt(file, delimiter='\t', dtype=float, skiprows=1)

# Print the 10th element of data_float
print(data_float[9])

# Plot a scatterplot of the data
plt.scatter(data_float[:, 0], data_float[:, 1])
plt.xlabel('time (min.)')
plt.ylabel('percentage of larvae')
plt.show()

IPython Shell 

In [4]: # Assign filename: file
        file = 'seaslug.txt'
        
        # Import file: data
        data = np.loadtxt(file, delimiter='\t', dtype=str)
        
        # Print the first element of data
        print(data[0])
        
        # Import data as floats and skip the first row: data_float
        data_float = np.loadtxt(file, delimiter='\t', dtype=float, skiprows=1)
        
        # Print the 10th element of data_float
        print(data_float[9])
        
        # Plot a scatterplot of the data
        plt.scatter(data_float[:, 0], data_float[:, 1])
        plt.xlabel('time (min.)')
        plt.ylabel('percentage of larvae')
        plt.show()
['Time' 'Percent']
[0.    0.357]

<script.py> output:
    ['Time' 'Percent']
    [0.    0.357]

Plot





 





Working with mixed datatypes (1)
Much of the time you will need to import datasets which have different datatypes in different columns; one column may contain strings and another floats, for example. The function np.loadtxt() will freak at this. There is another function, np.genfromtxt(), which can handle such structures. If we pass dtype=None to it, it will figure out what types each column should be.
Import 'titanic.csv' using the function np.genfromtxt() as follows:
data = np.genfromtxt('titanic.csv', delimiter=',', names=True, dtype=None)
Here, the first argument is the filename, the second specifies the delimiter , and the third argument names tells us there is a header. Because the data are of different types, data is an object called a structured array. Because numpy arrays have to contain elements that are all the same type, the structured array solves this by being a 1D array, where each element of the array is a row of the flat file imported. You can test this by checking out the array's shape in the shell by executing np.shape(data).
Accessing rows and columns of structured arrays is super-intuitive: to get the ith row, merely execute data[i] and to get the column with name 'Fare', execute data['Fare'].
Print the entire column with name Survived to the shell. What are the last 4 values of this column?
Instructions
Possible Answers
•	 
1,0,0,1.
•	 
1,2,0,0.
•	 
1,0,1,0.
•	 
0,1,1,1.
Script.Py

np.shape(['Survived'])


Script.Py


IPython Shell 


Working with mixed datatypes (2)
You have just used np.genfromtxt() to import data containing mixed datatypes. There is also another function np.recfromcsv() that behaves similarly to np.genfromtxt(), except that its default dtype is None. In this exercise, you'll practice using this to achieve the same result.
Instructions
•	Import titanic.csv using the function np.recfromcsv() and assign it to the variable, d. You'll only need to pass file to it because it has the defaults delimiter=',' and names=True in addition to dtype=None!
•	Run the remaining code to print the first three entries of the resulting array d.


Script.Py

# Assign the filename: file
file = 'titanic.csv'

# Import file using np.recfromcsv: d
d = np.recfromcsv('titanic.csv',delimiter=',', names=True, dtype=None)

# Print out first three entries of d
print(d[:3])

IPython Shell 

In [1]: # Assign the filename: file
        file = 'titanic.csv'
        
        # Import file using np.recfromcsv: d
        d = np.recfromcsv('titanic.csv',delimiter=',', names=True, dtype=None)
        
        # Print out first three entries of d
        print(d[:3])
[(1, 0, 3, b'male', 22., 1, 0, b'A/5 21171',  7.25  , b'', b'S')
 (2, 1, 1, b'female', 38., 1, 0, b'PC 17599', 71.2833, b'C85', b'C')
 (3, 1, 3, b'female', 26., 0, 0, b'STON/O2. 3101282',  7.925 , b'', b'S')]

<script.py> output:
    [(1, 0, 3, b'male', 22., 1, 0, b'A/5 21171',  7.25  , b'', b'S')
     (2, 1, 1, b'female', 38., 1, 0, b'PC 17599', 71.2833, b'C85', b'C')
     (3, 1, 3, b'female', 26., 0, 0, b'STON/O2. 3101282',  7.925 , b'', b'S')]
Using pandas to import flat files as DataFrames (1)
In the last exercise, you were able to import flat files containing columns with different datatypes as numpy arrays. However, the DataFrame object in pandas is a more appropriate structure in which to store such data and, thankfully, we can easily import files of mixed data types as DataFrames using the pandas functions read_csv() and read_table().
Instructions
•	Import the pandas package using the alias pd.
•	Read titanic.csv into a DataFrame called df. The file name is already stored in the file object.
•	In a print() call, view the head of the DataFrame.


Script.Py

# Import pandas as pd
import pandas as pd

# Assign the filename: file
file = 'titanic.csv'

# Read the file into a DataFrame: df
df = pd.read_csv('titanic.csv')

# View the head of the DataFrame
print(df)
print(df.head

IPython Shell 

In [1]: # Import pandas as pd
        import pandas as pd
        
        # Assign the filename: file
        file = 'titanic.csv'
        
        # Read the file into a DataFrame: df
        df = pd.read_csv('titanic.csv')
        
        # View the head of the DataFrame
        print(df)

IPython Shell 

     PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch  \
0              1         0       3    male  22.0      1      0   
1              2         1       1  female  38.0      1      0   
2              3         1       3  female  26.0      0      0   
3              4         1       1  female  35.0      1      0   
4              5         0       3    male  35.0      0      0   
5              6         0       3    male   NaN      0      0   
6              7         0       1    male  54.0      0      0   
7              8         0       3    male   2.0      3      1   
8              9         1       3  female  27.0      0      2   
9             10         1       2  female  14.0      1      0   
10            11         1       3  female   4.0      1      1   
11            12         1       1  female  58.0      0      0   
12            13         0       3    male  20.0      0      0   
13            14         0       3    male  39.0      1      5   
14            15         0       3  female  14.0      0      0   
15            16         1       2  female  55.0      0      0   
16            17         0       3    male   2.0      4      1   
17            18         1       2    male   NaN      0      0   
18            19         0       3  female  31.0      1      0   
19            20         1       3  female   NaN      0      0   
20            21         0       2    male  35.0      0      0   
21            22         1       2    male  34.0      0      0   
22            23         1       3  female  15.0      0      0   
23            24         1       1    male  28.0      0      0   
24            25         0       3  female   8.0      3      1   
25            26         1       3  female  38.0      1      5   
26            27         0       3    male   NaN      0      0   
27            28         0       1    male  19.0      3      2   
28            29         1       3  female   NaN      0      0   
29            30         0       3    male   NaN      0      0   
..           ...       ...     ...     ...   ...    ...    ...   
861          862         0       2    male  21.0      1      0   
862          863         1       1  female  48.0      0      0   
863          864         0       3  female   NaN      8      2   
864          865         0       2    male  24.0      0      0   
865          866         1       2  female  42.0      0      0   
866          867         1       2  female  27.0      1      0   
867          868         0       1    male  31.0      0      0   
868          869         0       3    male   NaN      0      0   
869          870         1       3    male   4.0      1      1   
870          871         0       3    male  26.0      0      0   
871          872         1       1  female  47.0      1      1   
872          873         0       1    male  33.0      0      0   
873          874         0       3    male  47.0      0      0   
874          875         1       2  female  28.0      1      0   
875          876         1       3  female  15.0      0      0   
876          877         0       3    male  20.0      0      0   
877          878         0       3    male  19.0      0      0   
878          879         0       3    male   NaN      0      0   
879          880         1       1  female  56.0      0      1   
880          881         1       2  female  25.0      0      1   
881          882         0       3    male  33.0      0      0   
882          883         0       3  female  22.0      0      0   
883          884         0       2    male  28.0      0      0   
884          885         0       3    male  25.0      0      0   
885          886         0       3  female  39.0      0      5   
886          887         0       2    male  27.0      0      0   
887          888         1       1  female  19.0      0      0   
888          889         0       3  female   NaN      1      2   
889          890         1       1    male  26.0      0      0   
890          891         0       3    male  32.0      0      0   

               Ticket      Fare        Cabin Embarked  
0           A/5 21171    7.2500          NaN        S  
1            PC 17599   71.2833          C85        C  
2    STON/O2. 3101282    7.9250          NaN        S  
3              113803   53.1000         C123        S  
4              373450    8.0500          NaN        S  
5              330877    8.4583          NaN        Q  
6               17463   51.8625          E46        S  
7              349909   21.0750          NaN        S  
8              347742   11.1333          NaN        S  
9              237736   30.0708          NaN        C  
10            PP 9549   16.7000           G6        S  
11             113783   26.5500         C103        S  
12          A/5. 2151    8.0500          NaN        S  
13             347082   31.2750          NaN        S  
14             350406    7.8542          NaN        S  
15             248706   16.0000          NaN        S  
16             382652   29.1250          NaN        Q  
17             244373   13.0000          NaN        S  
18             345763   18.0000          NaN        S  
19               2649    7.2250          NaN        C  
20             239865   26.0000          NaN        S  
21             248698   13.0000          D56        S  
22             330923    8.0292          NaN        Q  
23             113788   35.5000           A6        S  
24             349909   21.0750          NaN        S  
25             347077   31.3875          NaN        S  
26               2631    7.2250          NaN        C  
27              19950  263.0000  C23 C25 C27        S  
28             330959    7.8792          NaN        Q  
29             349216    7.8958          NaN        S  
..                ...       ...          ...      ...  
861             28134   11.5000          NaN        S  
862             17466   25.9292          D17        S  
863          CA. 2343   69.5500          NaN        S  
864            233866   13.0000          NaN        S  
865            236852   13.0000          NaN        S  
866     SC/PARIS 2149   13.8583          NaN        C  
867          PC 17590   50.4958          A24        S  
868            345777    9.5000          NaN        S  
869            347742   11.1333          NaN        S  
870            349248    7.8958          NaN        S  
871             11751   52.5542          D35        S  
872               695    5.0000  B51 B53 B55        S  
873            345765    9.0000          NaN        S  
874         P/PP 3381   24.0000          NaN        C  
875              2667    7.2250          NaN        C  
876              7534    9.8458          NaN        S  
877            349212    7.8958          NaN        S  
878            349217    7.8958          NaN        S  
879             11767   83.1583          C50        C  
880            230433   26.0000          NaN        S  
881            349257    7.8958          NaN        S  
882              7552   10.5167          NaN        S  
883  C.A./SOTON 34068   10.5000          NaN        S  
884   SOTON/OQ 392076    7.0500          NaN        S  
885            382652   29.1250          NaN        Q  
886            211536   13.0000          NaN        S  
887            112053   30.0000          B42        S  
888        W./C. 6607   23.4500          NaN        S  
889            111369   30.0000         C148        C  
890            370376    7.7500          NaN        Q  

[891 rows x 11 columns]

<script.py> output:
         PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch  \
    0              1         0       3    male  22.0      1      0   
    1              2         1       1  female  38.0      1      0   
    2              3         1       3  female  26.0      0      0   
    3              4         1       1  female  35.0      1      0   
    4              5         0       3    male  35.0      0      0   
    5              6         0       3    male   NaN      0      0   
    6              7         0       1    male  54.0      0      0   
    7              8         0       3    male   2.0      3      1   
    8              9         1       3  female  27.0      0      2   
    9             10         1       2  female  14.0      1      0   
    10            11         1       3  female   4.0      1      1   
    11            12         1       1  female  58.0      0      0   
    12            13         0       3    male  20.0      0      0   
    13            14         0       3    male  39.0      1      5   
    14            15         0       3  female  14.0      0      0   
    15            16         1       2  female  55.0      0      0   
    16            17         0       3    male   2.0      4      1   
    17            18         1       2    male   NaN      0      0   
    18            19         0       3  female  31.0      1      0   
    19            20         1       3  female   NaN      0      0   
    20            21         0       2    male  35.0      0      0   
    21            22         1       2    male  34.0      0      0   
    22            23         1       3  female  15.0      0      0   
    23            24         1       1    male  28.0      0      0   
    24            25         0       3  female   8.0      3      1   
    25            26         1       3  female  38.0      1      5   
    26            27         0       3    male   NaN      0      0   
    27            28         0       1    male  19.0      3      2   
    28            29         1       3  female   NaN      0      0   
    29            30         0       3    male   NaN      0      0   
    ..           ...       ...     ...     ...   ...    ...    ...   
    861          862         0       2    male  21.0      1      0   
    862          863         1       1  female  48.0      0      0   
    863          864         0       3  female   NaN      8      2   
    864          865         0       2    male  24.0      0      0   
    865          866         1       2  female  42.0      0      0   
    866          867         1       2  female  27.0      1      0   
    867          868         0       1    male  31.0      0      0   
    868          869         0       3    male   NaN      0      0   
    869          870         1       3    male   4.0      1      1   
    870          871         0       3    male  26.0      0      0   
    871          872         1       1  female  47.0      1      1   
    872          873         0       1    male  33.0      0      0   
    873          874         0       3    male  47.0      0      0   
    874          875         1       2  female  28.0      1      0   
    875          876         1       3  female  15.0      0      0   
    876          877         0       3    male  20.0      0      0   
    877          878         0       3    male  19.0      0      0   
    878          879         0       3    male   NaN      0      0   
    879          880         1       1  female  56.0      0      1   
    880          881         1       2  female  25.0      0      1   
    881          882         0       3    male  33.0      0      0   
    882          883         0       3  female  22.0      0      0   
    883          884         0       2    male  28.0      0      0   
    884          885         0       3    male  25.0      0      0   
    885          886         0       3  female  39.0      0      5   
    886          887         0       2    male  27.0      0      0   
    887          888         1       1  female  19.0      0      0   
    888          889         0       3  female   NaN      1      2   
    889          890         1       1    male  26.0      0      0   
    890          891         0       3    male  32.0      0      0   
    
                   Ticket      Fare        Cabin Embarked  
    0           A/5 21171    7.2500          NaN        S  
    1            PC 17599   71.2833          C85        C  
    2    STON/O2. 3101282    7.9250          NaN        S  
    3              113803   53.1000         C123        S  
    4              373450    8.0500          NaN        S  
    5              330877    8.4583          NaN        Q  
    6               17463   51.8625          E46        S  
    7              349909   21.0750          NaN        S  
    8              347742   11.1333          NaN        S  
    9              237736   30.0708          NaN        C  
    10            PP 9549   16.7000           G6        S  
    11             113783   26.5500         C103        S  
    12          A/5. 2151    8.0500          NaN        S  
    13             347082   31.2750          NaN        S  
    14             350406    7.8542          NaN        S  
    15             248706   16.0000          NaN        S  
    16             382652   29.1250          NaN        Q  
    17             244373   13.0000          NaN        S  
    18             345763   18.0000          NaN        S  
    19               2649    7.2250          NaN        C  
    20             239865   26.0000          NaN        S  
    21             248698   13.0000          D56        S  
    22             330923    8.0292          NaN        Q  
    23             113788   35.5000           A6        S  
    24             349909   21.0750          NaN        S  
    25             347077   31.3875          NaN        S  
    26               2631    7.2250          NaN        C  
    27              19950  263.0000  C23 C25 C27        S  
    28             330959    7.8792          NaN        Q  
    29             349216    7.8958          NaN        S  
    ..                ...       ...          ...      ...  
    861             28134   11.5000          NaN        S  
    862             17466   25.9292          D17        S  
    863          CA. 2343   69.5500          NaN        S  
    864            233866   13.0000          NaN        S  
    865            236852   13.0000          NaN        S  
    866     SC/PARIS 2149   13.8583          NaN        C  
    867          PC 17590   50.4958          A24        S  
    868            345777    9.5000          NaN        S  
    869            347742   11.1333          NaN        S  
    870            349248    7.8958          NaN        S  
    871             11751   52.5542          D35        S  
    872               695    5.0000  B51 B53 B55        S  
    873            345765    9.0000          NaN        S  
    874         P/PP 3381   24.0000          NaN        C  
    875              2667    7.2250          NaN        C  
    876              7534    9.8458          NaN        S  
    877            349212    7.8958          NaN        S  
    878            349217    7.8958          NaN        S  
    879             11767   83.1583          C50        C  
    880            230433   26.0000          NaN        S  
    881            349257    7.8958          NaN        S  
    882              7552   10.5167          NaN        S  
    883  C.A./SOTON 34068   10.5000          NaN        S  
    884   SOTON/OQ 392076    7.0500          NaN        S  
    885            382652   29.1250          NaN        Q  
    886            211536   13.0000          NaN        S  
    887            112053   30.0000          B42        S  
    888        W./C. 6607   23.4500          NaN        S  
    889            111369   30.0000         C148        C  
    890            370376    7.7500          NaN        Q  
    
    [891 rows x 11 columns]

In [2]:


Script.Py

# Import pandas as pd
import pandas as pd

# Assign the filename: file
file = 'titanic.csv'

# Read the file into a DataFrame: df
df = pd.read_csv('titanic.csv')

# View the head of the DataFrame
print(df.head


In [1]: # Import pandas as pd
        import pandas as pd
        
        # Assign the filename: file
        file = 'titanic.csv'
        
        # Read the file into a DataFrame: df
        df = pd.read_csv('titanic.csv')
        
        # View the head of the DataFrame
        print(df)
     PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch  \
0              1         0       3    male  22.0      1      0   
1              2         1       1  female  38.0      1      0   
2              3         1       3  female  26.0      0      0   
3              4         1       1  female  35.0      1      0   
4              5         0       3    male  35.0      0      0   
5              6         0       3    male   NaN      0      0   
6              7         0       1    male  54.0      0      0   
7              8         0       3    male   2.0      3      1   
8              9         1       3  female  27.0      0      2   
9             10         1       2  female  14.0      1      0   
10            11         1       3  female   4.0      1      1   
11            12         1       1  female  58.0      0      0   
12            13         0       3    male  20.0      0      0   
13            14         0       3    male  39.0      1      5   
14            15         0       3  female  14.0      0      0   
15            16         1       2  female  55.0      0      0   
16            17         0       3    male   2.0      4      1   
17            18         1       2    male   NaN      0      0   
18            19         0       3  female  31.0      1      0   
19            20         1       3  female   NaN      0      0   
20            21         0       2    male  35.0      0      0   
21            22         1       2    male  34.0      0      0   
22            23         1       3  female  15.0      0      0   
23            24         1       1    male  28.0      0      0   
24            25         0       3  female   8.0      3      1   
25            26         1       3  female  38.0      1      5   
26            27         0       3    male   NaN      0      0   
27            28         0       1    male  19.0      3      2   
28            29         1       3  female   NaN      0      0   
29            30         0       3    male   NaN      0      0   
..           ...       ...     ...     ...   ...    ...    ...   
861          862         0       2    male  21.0      1      0   
862          863         1       1  female  48.0      0      0   
863          864         0       3  female   NaN      8      2   
864          865         0       2    male  24.0      0      0   
865          866         1       2  female  42.0      0      0   
866          867         1       2  female  27.0      1      0   
867          868         0       1    male  31.0      0      0   
868          869         0       3    male   NaN      0      0   
869          870         1       3    male   4.0      1      1   
870          871         0       3    male  26.0      0      0   
871          872         1       1  female  47.0      1      1   
872          873         0       1    male  33.0      0      0   
873          874         0       3    male  47.0      0      0   
874          875         1       2  female  28.0      1      0   
875          876         1       3  female  15.0      0      0   
876          877         0       3    male  20.0      0      0   
877          878         0       3    male  19.0      0      0   
878          879         0       3    male   NaN      0      0   
879          880         1       1  female  56.0      0      1   
880          881         1       2  female  25.0      0      1   
881          882         0       3    male  33.0      0      0   
882          883         0       3  female  22.0      0      0   
883          884         0       2    male  28.0      0      0   
884          885         0       3    male  25.0      0      0   
885          886         0       3  female  39.0      0      5   
886          887         0       2    male  27.0      0      0   
887          888         1       1  female  19.0      0      0   
888          889         0       3  female   NaN      1      2   
889          890         1       1    male  26.0      0      0   
890          891         0       3    male  32.0      0      0   

               Ticket      Fare        Cabin Embarked  
0           A/5 21171    7.2500          NaN        S  
1            PC 17599   71.2833          C85        C  
2    STON/O2. 3101282    7.9250          NaN        S  
3              113803   53.1000         C123        S  
4              373450    8.0500          NaN        S  
5              330877    8.4583          NaN        Q  
6               17463   51.8625          E46        S  
7              349909   21.0750          NaN        S  
8              347742   11.1333          NaN        S  
9              237736   30.0708          NaN        C  
10            PP 9549   16.7000           G6        S  
11             113783   26.5500         C103        S  
12          A/5. 2151    8.0500          NaN        S  
13             347082   31.2750          NaN        S  
14             350406    7.8542          NaN        S  
15             248706   16.0000          NaN        S  
16             382652   29.1250          NaN        Q  
17             244373   13.0000          NaN        S  
18             345763   18.0000          NaN        S  
19               2649    7.2250          NaN        C  
20             239865   26.0000          NaN        S  
21             248698   13.0000          D56        S  
22             330923    8.0292          NaN        Q  
23             113788   35.5000           A6        S  
24             349909   21.0750          NaN        S  
25             347077   31.3875          NaN        S  
26               2631    7.2250          NaN        C  
27              19950  263.0000  C23 C25 C27        S  
28             330959    7.8792          NaN        Q  
29             349216    7.8958          NaN        S  
..                ...       ...          ...      ...  
861             28134   11.5000          NaN        S  
862             17466   25.9292          D17        S  
863          CA. 2343   69.5500          NaN        S  
864            233866   13.0000          NaN        S  
865            236852   13.0000          NaN        S  
866     SC/PARIS 2149   13.8583          NaN        C  
867          PC 17590   50.4958          A24        S  
868            345777    9.5000          NaN        S  
869            347742   11.1333          NaN        S  
870            349248    7.8958          NaN        S  
871             11751   52.5542          D35        S  
872               695    5.0000  B51 B53 B55        S  
873            345765    9.0000          NaN        S  
874         P/PP 3381   24.0000          NaN        C  
875              2667    7.2250          NaN        C  
876              7534    9.8458          NaN        S  
877            349212    7.8958          NaN        S  
878            349217    7.8958          NaN        S  
879             11767   83.1583          C50        C  
880            230433   26.0000          NaN        S  
881            349257    7.8958          NaN        S  
882              7552   10.5167          NaN        S  
883  C.A./SOTON 34068   10.5000          NaN        S  
884   SOTON/OQ 392076    7.0500          NaN        S  
885            382652   29.1250          NaN        Q  
886            211536   13.0000          NaN        S  
887            112053   30.0000          B42        S  
888        W./C. 6607   23.4500          NaN        S  
889            111369   30.0000         C148        C  
890            370376    7.7500          NaN        Q  

[891 rows x 11 columns]

<script.py> output:
         PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch  \
    0              1         0       3    male  22.0      1      0   
    1              2         1       1  female  38.0      1      0   
    2              3         1       3  female  26.0      0      0   
    3              4         1       1  female  35.0      1      0   
    4              5         0       3    male  35.0      0      0   
    5              6         0       3    male   NaN      0      0   
    6              7         0       1    male  54.0      0      0   
    7              8         0       3    male   2.0      3      1   
    8              9         1       3  female  27.0      0      2   
    9             10         1       2  female  14.0      1      0   
    10            11         1       3  female   4.0      1      1   
    11            12         1       1  female  58.0      0      0   
    12            13         0       3    male  20.0      0      0   
    13            14         0       3    male  39.0      1      5   
    14            15         0       3  female  14.0      0      0   
    15            16         1       2  female  55.0      0      0   
    16            17         0       3    male   2.0      4      1   
    17            18         1       2    male   NaN      0      0   
    18            19         0       3  female  31.0      1      0   
    19            20         1       3  female   NaN      0      0   
    20            21         0       2    male  35.0      0      0   
    21            22         1       2    male  34.0      0      0   
    22            23         1       3  female  15.0      0      0   
    23            24         1       1    male  28.0      0      0   
    24            25         0       3  female   8.0      3      1   
    25            26         1       3  female  38.0      1      5   
    26            27         0       3    male   NaN      0      0   
    27            28         0       1    male  19.0      3      2   
    28            29         1       3  female   NaN      0      0   
    29            30         0       3    male   NaN      0      0   
    ..           ...       ...     ...     ...   ...    ...    ...   
    861          862         0       2    male  21.0      1      0   
    862          863         1       1  female  48.0      0      0   
    863          864         0       3  female   NaN      8      2   
    864          865         0       2    male  24.0      0      0   
    865          866         1       2  female  42.0      0      0   
    866          867         1       2  female  27.0      1      0   
    867          868         0       1    male  31.0      0      0   
    868          869         0       3    male   NaN      0      0   
    869          870         1       3    male   4.0      1      1   
    870          871         0       3    male  26.0      0      0   
    871          872         1       1  female  47.0      1      1   
    872          873         0       1    male  33.0      0      0   
    873          874         0       3    male  47.0      0      0   
    874          875         1       2  female  28.0      1      0   
    875          876         1       3  female  15.0      0      0   
    876          877         0       3    male  20.0      0      0   
    877          878         0       3    male  19.0      0      0   
    878          879         0       3    male   NaN      0      0   
    879          880         1       1  female  56.0      0      1   
    880          881         1       2  female  25.0      0      1   
    881          882         0       3    male  33.0      0      0   
    882          883         0       3  female  22.0      0      0   
    883          884         0       2    male  28.0      0      0   
    884          885         0       3    male  25.0      0      0   
    885          886         0       3  female  39.0      0      5   
    886          887         0       2    male  27.0      0      0   
    887          888         1       1  female  19.0      0      0   
    888          889         0       3  female   NaN      1      2   
    889          890         1       1    male  26.0      0      0   
    890          891         0       3    male  32.0      0      0   
    
                   Ticket      Fare        Cabin Embarked  
    0           A/5 21171    7.2500          NaN        S  
    1            PC 17599   71.2833          C85        C  
    2    STON/O2. 3101282    7.9250          NaN        S  
    3              113803   53.1000         C123        S  
    4              373450    8.0500          NaN        S  
    5              330877    8.4583          NaN        Q  
    6               17463   51.8625          E46        S  
    7              349909   21.0750          NaN        S  
    8              347742   11.1333          NaN        S  
    9              237736   30.0708          NaN        C  
    10            PP 9549   16.7000           G6        S  
    11             113783   26.5500         C103        S  
    12          A/5. 2151    8.0500          NaN        S  
    13             347082   31.2750          NaN        S  
    14             350406    7.8542          NaN        S  
    15             248706   16.0000          NaN        S  
    16             382652   29.1250          NaN        Q  
    17             244373   13.0000          NaN        S  
    18             345763   18.0000          NaN        S  
    19               2649    7.2250          NaN        C  
    20             239865   26.0000          NaN        S  
    21             248698   13.0000          D56        S  
    22             330923    8.0292          NaN        Q  
    23             113788   35.5000           A6        S  
    24             349909   21.0750          NaN        S  
    25             347077   31.3875          NaN        S  
    26               2631    7.2250          NaN        C  
    27              19950  263.0000  C23 C25 C27        S  
    28             330959    7.8792          NaN        Q  
    29             349216    7.8958          NaN        S  
    ..                ...       ...          ...      ...  
    861             28134   11.5000          NaN        S  
    862             17466   25.9292          D17        S  
    863          CA. 2343   69.5500          NaN        S  
    864            233866   13.0000          NaN        S  
    865            236852   13.0000          NaN        S  
    866     SC/PARIS 2149   13.8583          NaN        C  
    867          PC 17590   50.4958          A24        S  
    868            345777    9.5000          NaN        S  
    869            347742   11.1333          NaN        S  
    870            349248    7.8958          NaN        S  
    871             11751   52.5542          D35        S  
    872               695    5.0000  B51 B53 B55        S  
    873            345765    9.0000          NaN        S  
    874         P/PP 3381   24.0000          NaN        C  
    875              2667    7.2250          NaN        C  
    876              7534    9.8458          NaN        S  
    877            349212    7.8958          NaN        S  
    878            349217    7.8958          NaN        S  
    879             11767   83.1583          C50        C  
    880            230433   26.0000          NaN        S  
    881            349257    7.8958          NaN        S  
    882              7552   10.5167          NaN        S  
    883  C.A./SOTON 34068   10.5000          NaN        S  
    884   SOTON/OQ 392076    7.0500          NaN        S  
    885            382652   29.1250          NaN        Q  
    886            211536   13.0000          NaN        S  
    887            112053   30.0000          B42        S  
    888        W./C. 6607   23.4500          NaN        S  
    889            111369   30.0000         C148        C  
    890            370376    7.7500          NaN        Q  
    
    [891 rows x 11 columns]

<script.py> output:
       PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch  \
    0            1         0       3    male  22.0      1      0   
    1            2         1       1  female  38.0      1      0   
    2            3         1       3  female  26.0      0      0   
    3            4         1       1  female  35.0      1      0   
    4            5         0       3    male  35.0      0      0   
    
                 Ticket     Fare Cabin Embarked  
    0         A/5 21171   7.2500   NaN        S  
    1          PC 17599  71.2833   C85        C  
    2  STON/O2. 3101282   7.9250   NaN        S  
    3            113803  53.1000  C123        S  
    4            373450   8.0500   NaN        S


Using pandas to import flat files as DataFrames (2)
In the last exercise, you were able to import flat files into a pandasDataFrame. As a bonus, it is then straightforward to retrieve the correspondingnumpy array using the attribute values. You'll now have a chance to do this using the MNIST dataset, which is available as digits.csv.


Instructions
•	Import the first 5 rows of the file into a DataFrame using the function pd.read_csv() and assign the result to data. You'll need to use the arguments nrows and header (there is no header in this file).
•	Build a numpy array from the resulting DataFrame in data and assign to data_array.
•	Execute print(type(data_array)) to print the datatype of data_array.

Script.py

# Assign the filename: file
file = 'digits.csv'

# Read the first 5 rows of the file into a DataFrame: data
data = pd.read_csv(file, nrows=5, header=None)

# Build a numpy array from the DataFrame: data_array
data_array = data.values

# Print the datatype of data_array to the shell
print(type(data_array))

IPython Shell

In [7]: # Assign the filename: file
        file = 'digits.csv'
        
        # Read the first 5 rows of the file into a DataFrame: data
        data = pd.read_csv(file, nrows=5, header=None)
        
        # Build a numpy array from the DataFrame: data_array
        data_array = data.values
        
        # Print the datatype of data_array to the shell
        print(type(data_array))
<class 'numpy.ndarray'>

Customizing your pandas import
The pandas package is also great at dealing with many of the issues you will encounter when importing data as a data scientist, such as comments occurring in flat files, empty lines and missing values. Note that missing values are also commonly referred to as NA or NaN. To wrap up this chapter, you're now going to import a slightly corrupted copy of the Titanic dataset titanic_corrupt.txt, which
•	contains comments after the character '#'
•	is tab-delimited.
Instructions
100 XP
•	Complete the sep (the pandas version of delim), comment and na_values arguments of pd.read_csv(). comment takes characters that comments occur after in the file, which in this case is '#'. na_values takes a list of strings to recognize as NA/NaN, in this case the string 'Nothing'.
•	Execute the rest of the code to print the head of the resulting DataFrame and plot the histogram of the 'Age' of passengers aboard the Titanic.

Script.py

# Import matplotlib.pyplot as plt
import matplotlib.pyplot as plt

# Assign filename: file
file = 'titanic_corrupt.txt'

# Import file: data
data = pd.read_csv(file, sep='\t' , comment='#', na_values= ['Nothing'] )

# Print the head of the DataFrame
print(data.head())

# Plot 'Age' variable in a histogram
pd.DataFrame.hist(data[['Age']])
plt.xlabel('Age (years)')
plt.ylabel('count')
plt.show()

IPython Shell

In [3]: # Import matplotlib.pyplot as plt
        import matplotlib.pyplot as plt
        
        # Assign filename: file
        file = 'titanic_corrupt.txt'
        
        # Import file: data
        data = pd.read_csv(file, sep='\t' , comment='#', na_values= 'NaN' )
        
        # Print the head of the DataFrame
        print(data.head())
        
        # Plot 'Age' variable in a histogram
        pd.DataFrame.hist(data[['Age']])
        plt.xlabel('Age (years)')
        plt.ylabel('count')
        plt.show()
   PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch  \
0            1         0       3    male  22.0      1      0   
1            2         1       1  female  38.0      1      0   
2            3         1       3  female  26.0      0      0   
3            4         1       1  female  35.0      1      0   
4            5         0       3    male  35.0      0      0   

             Ticket    Fare    Cabin Embarked  
0         A/5 21171   7.250  Nothing       S   
1          PC 17599     NaN      NaN      NaN  
2  STON/O2. 3101282   7.925      NaN        S  
3            113803  53.100     C123        S  
4            373450   8.050      NaN        S

<script.py> output:
       PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch  \
    0            1         0       3    male  22.0      1      0   
    1            2         1       1  female  38.0      1      0   
    2            3         1       3  female  26.0      0      0   
    3            4         1       1  female  35.0      1      0   
    4            5         0       3    male  35.0      0      0   
    
                 Ticket    Fare    Cabin Embarked  
    0         A/5 21171   7.250  Nothing       S   
    1          PC 17599     NaN      NaN      NaN  
    2  STON/O2. 3101282   7.925      NaN        S  
    3            113803  53.100     C123        S  
    4            373450   8.050      NaN        S

<script.py> output:
       PassengerId  Survived  Pclass     Sex   Age  SibSp  Parch  \
    0            1         0       3    male  22.0      1      0   
    1            2         1       1  female  38.0      1      0   
    2            3         1       3  female  26.0      0      0   
    3            4         1       1  female  35.0      1      0   
    4            5         0       3    male  35.0      0      0   
    
                 Ticket    Fare Cabin Embarked  
    0         A/5 21171   7.250   NaN       S   
    1          PC 17599     NaN   NaN      NaN  
    2  STON/O2. 3101282   7.925   NaN        S  
    3            113803  53.100  C123        S  
    4            373450   8.050   NaN        S

In [4]:

 



