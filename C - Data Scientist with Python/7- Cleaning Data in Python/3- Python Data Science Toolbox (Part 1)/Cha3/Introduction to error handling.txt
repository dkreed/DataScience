1-	Pop quiz about errors
In the video, Hugo talked about how errors happen when functions are supplied arguments that they are unable to work with. In this exercise, you will identify which function call raises an error and what type of error is raised.
Take a look at the following function calls to len():
len('There is a beast in every man and it stirs when you put a sword in his hand.')

len(['robb', 'sansa', 'arya', 'eddard', 'jon'])

len(525600)

len(('jaime', 'cersei', 'tywin', 'tyrion', 'joffrey'))
Which of the function calls raises an error and what type of error is raised?
Instructions
50 XP
Possible Answers
•	 
The call len('There is a beast in every man and it stirs when you put a sword in his hand.')raises a TypeError.
•	 
The call len(['robb', 'sansa', 'arya', 'eddard', 'jon']) raises an IndexError.
•	 
The call len(525600) raises a TypeError.
In [2]: len(525600)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
    len(525600)
TypeError: object of type 'int' has no len()
•	 
The call len(('jaime', 'cersei', 'tywin', 'tyrion', 'joffrey')) raises a NameError.
Error handling with try-except
A good practice in writing your own functions is also anticipating the ways in which other people (or yourself, if you accidentally misuse your own function) might use the function you defined.
As in the previous exercise, you saw that the len() function is able to handle input arguments such as strings, lists, and tuples, but not int type ones and raises an appropriate error and error message when it encounters invalid input arguments. One way of doing this is through exception handling with the try-except block.
In this exercise, you will define a function as well as use a try-except block for handling cases when incorrect input arguments are passed to the function.
Recall the shout_echo() function you defined in previous exercises; parts of the function definition are provided in the sample code. Your goal is to complete the exception handling code in the function definition and provide an appropriate error message when raising an error.
Instructions
•	Initialize the variables echo_word and shout_words to empty strings.
•	Add the keywords try and except in the appropriate locations for the exception handling block.
•	Use the * operator to concatenate echo copies of word1. Assign the result to echo_word.
•	Concatenate the string '!!!' to echo_word. Assign the result to shout_words.
Answer / Script.py

# Define shout_echo
def shout_echo(word1, echo=1):
    """Concatenate echo copies of word1 and three
    exclamation marks at the end of the string."""

    # Initialize empty strings: echo_word, shout_words
    
    echo_word = '' 
    shout_words = ''

    # Add exception handling with try-except
    try:
        # Concatenate echo copies of word1 using *: echo_word
        echo_word = word1 * echo

        # Concatenate '!!!' to echo_word: shout_words
        shout_words = echo_word + '!!!'
    except:   
        # Print error message
        print("word1 must be a string and echo must be an integer.")

    # Return shout_words
    return shout_words

# Call shout_echo
shout_echo("particle", echo="accelerator")

Error handling by raising an error
Another way to raise an error is by using raise. In this exercise, you will add a raise statement to the shout_echo() function you defined before to raise an error message when the value supplied by the user to the echoargument is less than 0.
The call to shout_echo() uses valid argument values. To test and see how the raise statement works, simply change the value for the echoargument to a negative value. Don't forget to change it back to valid values to move on to the next exercise!
Instructions
•	Complete the if statement by checking if the value of echo is less than0.
•	In the body of the if statement, add a raise statement that raises a ValueError with message 'echo must be greater than 0' when the value supplied by the user to echo is less than 0
Answer / Script.py

# Define shout_echo
def shout_echo(word1, echo=1):
    """Concatenate echo copies of word1 and three
    exclamation marks at the end of the string."""

    # Raise an error with raise
    if echo < 0 :
        raise ValueError('echo must be greater than 0')

    # Concatenate echo copies of word1 using *: echo_word
    echo_word = word1 * echo

    # Concatenate '!!!' to echo_word: shout_word
    shout_word = echo_word + '!!!'

    # Return shout_word
    return shout_word

# Call shout_echo
shout_echo("particle", echo=5)
